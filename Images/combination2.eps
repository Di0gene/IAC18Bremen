%!PS-Adobe-2.0 EPSF-1.2
%%Title: tmpPSFile
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%CreationDate: Thu Jul 21 12:58:55 2016
%%For:Simone Simone
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 3 2 322 58
%%HiResBoundingBox: 3.840047 2.863125 321.320029 57.149998
%%EndComments

%%BeginProlog
%%BeginPreview: 319 54 8 432
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000117755557700
% 00000000000000000000000000000000000000000011002277000000000000000000000000000000
% 00000000001100000000000000001100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000bb1100004488
% 00000000000000000000000000000000000000000055001133000000000000000000000000000000
% 00000000005500000000000000005500000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000055aa00000000ee
% 334422550000004455220033442222003344110044bb444144003344224400000033334455000000
% 1144442244bb4411003344110044bb44110044552200000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000888800000000bb
% 44dd1111aa00556600aa0000dd3355447700990000bb0000bb0000ee11447700447711aa22000000
% 8800114400bb0000447700990000bb0000556600aa00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000066aa00000000ff
% 11bb0000bb33aa6644881100bb0000004444bb0000bb0000bb0000bb00448800446600aa00000000
% 55aa991100bb0000004444bb0000bb0000aa66448811000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000011dd1100004499
% 00bb0000bb11993300110000bb0000777700bb2200bb0033bb0000bb004488003355551100000000
% 5500448800bb0033777700bb2200bb00339933001100000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000338811448811
% 00dd44776600227744550044dd3300668844aa550099554edd2233dd2277aa1122ccbb8811000000
% 9944555500995522668844aa55009955222277445500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000033220000
% 00bb0000000000000000000000000000000000000000000000000000000000008811001188000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 66dd4400000000000000000000000000000000000000000000000000000000006655445555000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000001100000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000001100000000
% 000088f1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffe1440000000000000000000000
% 00000000000000000000000000000000000000000000002244443300444444110000000000000000
% 33440000000000000000000000000000000000334400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000088f2ffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8d1100
% 008cffc09c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c
% 9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c
% 9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9cd2ff3300000000000000000000
% 00000000000000000000000000000000000000000000002288aa330044dd5511dd00000000000000
% 33cc00000000000000000088884477cc44558833cc00000000000000000000000000000000000000
% 00001100000000000000000000000000000000000000000000000000000000000000000000003344
% 4411000033442200000000000000000000000000000000008df7cebcbcbcbcbcbcbcbcbcbcbcbcbc
% bcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcc8f7ae00
% 00ffb778787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878dbaf00000000000000000000
% 0000000000000000000000000000000000000000000000008888000000bb00002200000000000000
% 00bb00000000000000000055000044bb00007700bb00000000000000000000000000000000000000
% 000066000000000000000000000000000055558855000055446633000055446633000000000033bb
% 881100004499220000000000000000000000000000000000ffcea4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4bcff33
% 44ff8a78787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878b7f000000000000000000000
% 0000000000000000000000000000000000000000000000008888000000bb00224400000000441133
% 22bb00442200000000000022000044bb00002200bb00442200003344113333440022441100003344
% 2211cc4433000000000000000000000033aa0000ee0022880000aa0022880000aa00000000000066
% 990000004422000000000000000000000000000000000044ffaaa4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4ff66
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000088bb888888dd0022cc00001188009933
% 55bb6600aa22000000000000000044bb00000000bb6600aa220033dd44994ecc0022994400771100
% aa33cc4433000000000000000000000000330022cc00778800008844778800008844000000000011
% dd1100005500000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 0000000000000000000000000000000000000000000000008888000000bb0000bb00004488008888
% 00bb22008844000000000000000044bb00000000bb220088440000bb110000bb0000884400777733
% 3300bb00000000000000000000000000000044aa2200888800008844888800008844000000000000
% 996600115500000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 0000000000000000000000000000000000000000000000008888000000bb0000bb000011bb119922
% 00bb00008844000000000000000044bb00000000bb000088440000bb000000bb00008844000077aa
% cc00bb00110000000000000000000000000000339900888800008844888800008844000000000000
% 33bb00550000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 0000000000000000000000000000000000000000000000008888000000bb0000bb00000044441100
% 00bb00008844000000000000000044bb00000000bb000088440000bb000000bb0000884400550000
% 6644bb0044000000000000000000000011220000bb44888800008844888800008844000000000000
% 00dd22770000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 000000000000000000000000000000000000000000000022aacc330066ee7741dd550000dd88bb88
% 41dd6622bb88110000000000003388dd55110033dd6622bb881144dd551100776655bb8811775544
% 8800776655000000000000000000000088880000cc3333880000bb1133880000bb11000000000000
% 0077aa330000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000008811000044
% 77000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000115522559900008822337700008822337700000000000000
% 0022cc000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000008833000077
% 55000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000044220000000033220000000033220000000000000000
% 000011000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000033445522
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 7878788a9c9378787878789c9c929c9c9378789c9c8a787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ffa48e78787878a4a4a48e78787878a4
% a4a4a4996262998ea4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 7878788ac0e4787878788aeda592c0d2937878c0b78a78a5a5c0a578787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ffa48e4d4278784d57a48e4d4278784d
% 57a4994d99994d4da4a4a4a4a4424d4d62a4a46d786283a4a46d786283a4a46d786283a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878789cc0a57878789cdb7878c0c078788a8a787893d27878f678787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ffa4a44d4da4a4a41683a44d4da4a4a4
% 1683786da4a4a457a4a4a4a4a462788ea4a48e4da4a437a48e4da4a437a48e4da4a437a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878789c93d278788193db7878c0c0788a8a7878787893788ae478787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000aa9933000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000aa99550000000044ffa4a44d4da4a4a41683a44d4da4a4a4
% 1683833799a4a48ea4a4a4a4a478a4a4a4a4574da4a44d78574da4a44d78574da4a44d78a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878789c78e481789c78db7878c0c093e48178787878789cd28a78787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000dffffff6dfc4
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbd6ffffdd88330044ffa4a44d4da499574da4a44d4da49957
% 4da4a442002c62a4a4a4a4a4a44d786262a44d4da4a44d784d4da4a44d784d4da4a44d78a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878789c78b7b7789c78db7878c0db93b7d278787878787893c978787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000d6ffffdfb890
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 88888888888888888888888888888888cdffffcc77220044ffa4a44d42787899a4a4a44d42787899
% a4a4a4a48e622c4da4a4a4a4a499a4a42c994d4da4a44d784d4da4a44d784d4da4a44d78a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878789c7881e48a8a78db7878c0c07878dba57878818a7878db9c787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000997722000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000009988220000000044ffa4a44d4da4a4a4a4a4a44d4da4a4a4
% a4a483a4a4a4992ca4a4a4a4836da4a42c784d4da4a44d784d4da4a44d784d4da4a44d78a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878789c7878c9ae7878db7878c0c078788aed8178c0c07878e493787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ffa4a44d4da4a4a4a4a4a44d4da4a4a4
% a4a4788ea4a4a442a4a4a4a4626da4a42199834da4a42c99834da4a42c99834da4a42c99a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787893dbc078a5ae78a5f6ae92d2e4937881ede49381a58aa5c978787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ffa48e372183a4a4a4a48e372183a4a4
% a4a4784d6d8e4d83a4a4a4a49957995762a4a44d8e8357a4a44d8e8357a4a44d8e8357a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 7878787878787878787878787878787878787878787878789c8a7878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a499a4997899a4a4a4a4a4a4a4788ea4a4a4a4838ea4a4a4a4838ea4a4a4a4838ea4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000002244443300444444110000000000000000
% 33440000000000000000000000224444330000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000002288aa330044dd5511dd00000000000000
% 33cc0000000000000000000000229988330000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000003344
% 441100003344220000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 0000000000000000000000000000000000000000000000008888000000bb00002200000000000000
% 00bb000000000000000000000000bb33000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000005544000055446633000055446633000000000033bb
% 881100004499220000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 0000000000000000000000000000000000000000000000008888000000bb00224400000000441133
% 22bb004422000000000000000000ee00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000011aa440022880000aa0022880000aa00000000000066
% 990000004422000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000088bb888888dd0022cc00001188009933
% 55bb6600aa220000000000000044aa00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000066884400778800008844778800008844000000000011
% dd1100005500000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 0000000000000000000000000000000000000000000000008888000000bb0000bb00004488008888
% 00bb2200884400000000000000887700000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000004411884400888800008844888800008844000000000000
% 996600115500000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 0000000000000000000000000000000000000000000000008888000000bb0000bb000011bb119922
% 00bb0000884400000000000000bb3300003344222244444400000000000000000000000000000000
% 00000000000000000000000000000000114400884400888800008844888800008844000000000000
% 33bb00550000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 0000000000000000000000000000000000000000000000008888000000bb0000bb00000044441100
% 00bb0000884400000000000000ee0000009933443399118822000000000000000000000000000000
% 00000000000000000000000000000000774444997722888800008844888800008844000000000000
% 00dd22770000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 33ff8a78787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878b7e100000000000000000000
% 000000000000000000000000000000000000000000000022aacc330066ee7741dd550000dd88bb88
% 41dd6622bb8811000000002288dd33002255aa330088009900000000000000000000000000000000
% 0000000000000000000000000000000000000088440033880000bb1133880000bb11000000000000
% 0077aa330000000000000000000000000000000000000044ffb0a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4ff66
% 00f1c078787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878e4af00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000008811000044
% 77000000000000000000000000000000665566223399556600000000000000000000000000000000
% 00000000000000000000000000000000000033bb8822008822337700008822337700000000000000
% 0022cc000000000000000000000000000000000000000000f3d5a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4c2ff33
% 0077ffc9a59c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c
% 9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c
% 9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9caedbf12200000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000008833000077
% 55000000000000000000000000000000000000008822000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000033220000000033220000000000000000
% 00001100000000000000000000000000000000000000000077ffdbc2bcbcbcbcbcbcbcbcbcbcbcbc
% bcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcd5ff8d00
% 000055d2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffaf330000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000033445522
% 00000000000000000000000000000000000000117722000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000055d7ffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe4770000
%%EndImage
%%EndPreview
save countdictstack mark newpath /showpage {} def /setpagedevice /pop load def
%%EndProlog
%%Page 1 1
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /Library/TeX/texbin/dvips -Pdownload35 -T
%+ 11.400000002980232cm,2.1100000029802324cm tmpPSFile -o
%+ /var/folders/yw/m51wd2y92_x5n48pgnksg2nc0000gn/T/latexdraw/latexdrawTmp146909873518566150/tmpPSFile.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.07.21:1258
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%Version: 003.002
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
FontDirectory/CMMI8 known{/CMMI8 findfont dup/UniqueID known{dup
/UniqueID get 5087383 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI8 def
/FontBBox {-24 -250 1110 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI8.) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 112 /p put
dup 115 /s put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBA9B440A6DD72BF8
97084C906B05FAD969086ED21AF0AA1471613182B26117D7494DD9F9270EF3ED
8DA4D957225F75D060237B6DAAD5A0AE3E702B3D1C437835B93B8AF1F9E7D966
E739CF3AD5E256F90286A34069E5BB4122F94F18F3485658D0D25B938522A879
8215A417CA2CBD20F71C5C5FCDE21EEA7BB27876D93BA667868A419287FE59BC
F538980597DBBA743DBBDBEBC61E3286DA7977833DC8BFC5E52FF5DF5EFD9A92
D070EB769E31E760A50FDE012DC0057835E8B9B046FCC83F1A0C40326AFB4E3A
0CC3BFA35FCC64E32854F32EB7DF10A19F95830136BBB8139DE1663B7FD790CE
464EA431AC109FCA0E03F3E0D355FAE20AC8774D6B1CE233C27680C77DDA7356
560A27C75993E8C980CD1E3B0683F7E8A05119B3AD567DAB4851B66E418687B7
F9B21B3BEF607918D5973421B68E65DFD8B6C8DFDCF1CAFE2637D365148EBCE3
FA4CC00052A2A522205EA3AE3461CEE02042E1A3F11467CB6C8C849B200CCE3D
0BC188EC7B934CBBC0AE2BF5DEA228181DBF0F774119F313516E7D97FF532621
9278F856C166CA6547504F34991D588A0631A5CD06363F3FEE9FA0772C783447
ECD0A200929CB58EBFB6B72008E4082B5D14AA560C24915B9463A92F38237886
C35CBB2D4DD6D0CA8C1D4EC46093041C6181C2F6586EE3E7D4E647A107B6DB23
DAD9AB5A0C2905455FE58075EFF6B48597078BFCCDD84812B98986F34987CE49
7EFB19814F2A58B0233A59331F6F8EB66401F04EE7B1ECAD9BC90A2BCEBE213D
DDDB1F75C83609ED6A669A0CED58B2E269E76ECF73616D94F13CF827C9BF354A
E82202988DCFE856786B8AE569AFF3105B55C72C58D310FFC0E10B2ABAC8DB06
40D5F72E54770E9DED1AF4616008595B8481E3D9AF4191CC9A5BFD9DDD01C9F1
FE7165D21E488DB40879E863D470CB31CA06E5B5F1F8C3CCE04B697CEB0F3557
ECAA358D2EC2B370519CE06138FA702314BA01F1F33881825EAE1230098BB3C9
59666983275CA4E8D9DB34979F86535577E79393A72F84B0F768FE8C92692907
15E9FE9894E98A0EBEA490CBC8C7E5A9F3E43B24C2C5A4BCD71DAAD3CC0B8B82
AC13933543E295C163F61C9FD18371CB514493F90BF7FB460C029B8DD2E2BF05
FD66B451DF277864DE1EE42100BF29E01A50258C2758F3EDE211BB3457B8243C
20BE72983FD6FA2581C5A953D94381E32E80D6D6095F2E93A5455C101BA71E8C
E560D4694E4C167EFA25FB1E9D214AEA745CE34CAA5468FAEF8F6BDB6C6BE8F4
3D58836C26A2392E4C4DECE284A90DDB3858A16D6135FED655A600929DE71605
6CA32F6851A2A6F71A9DF3D5D657593BB729CBCA2F4B059365B7263DC08AB211
9C547096E6427F6AA53CB2EB87DF0AFE2ABCDBD15D7EF228D3396413B83C6B4A
79E41F9BA55A2688F62A10472675E5658F151F9FD6634EC94EC0682C17448024
CC1633077C07A93E4DA8749D974FB8F4332B5DECF97D749C10DB60D4C90ACBFA
E65AE928C88BAE19234690EEABDB30BEDCEF2660D7464D5071058C30C572A2BC
7DEE5384BD7614A4BEC4C84E18CF7EC81C810256E8CE6520466C033E2A36D3D3
5D6074B3857415011D8D9D49A474D994571CDBB89AF92BEA879BEBAF67663F5C
17ACAE809C2231EDD0A76641BA52FA7B19A2798D54A4A9B62C42F9905851229F
2CEE0191C8AA5AC12BB0CE9E5E3E862683AB57DBB4AAD6AC0FA8BA4F408D41E0
755F72B82B7C18EC6B13995BF7AFD66AF4BA0EA7523DA8B75EE751744EBA9CA4
4E8BC1FB37734503A5B24FB9F2C2D07A47CFC477F02413D55BD7DC180B0344E8
50248801FA6BE26C97F397797F5F9DF762967E7CD92CCB8B2E587C92177619A4
BF8046CBC72C6E69DC78B8CB6B7381A290080EF59F5B9F29C1167B261C932E9D
010D2D14BB425D157F22BC0305770AECC5BC80000F8CCFB9930255A68F299ED9
D3B5B83A2CC00E3305EB281E1A7054734661B175C6CA0AF168790985F173DF03
A8693B677BAFE23C3CF833FF6463B136FC370E4F0C29E322DBEF637F62C33CD9
B0A8338FD67EC628E3BF2FCBF7CF0347D5CBA1DBE6DE878DD670176B85F69EF2
3C5CCA1BD2B8A385F113EF1CE522F5A6AE053B9C1E39408C9459DE3E7FE2C4ED
77F026B0081BB80D40185458139C16333EA27F43EF1204BFBF80BC5301B2A3AD
B10F7EFBB4F5B7E04DA1167F68BB6D4049440B0F57385FF0A95E72760C6A12F8
1335BB31CB74081FBAA319180DC00113CF50CC5A41D2E751E055DA1429CD75BB
0060C21CED634FDA106C49A12B356129D010E29F2919301AA7F80222AF3905ED
672FF85C9897A70241E8DDB9A53034B6BB44E140D9E739848E7A782F24B98AC8
00DA09EBE4532787E5CF3ED815705F659D8E52DC2C2D4949374A3BF192BEEB99
1D9A90A4F3250BF8A1FD40D91F5B34AF2CC561FD02FED712500B24330D87DA9E
4AA46B6E34BCB40B1F73A1DDE07E002B9478E9651D2BF85E67585B6ED812BE03
A594874A235B1C1840C4BF4BA6D863583D8C12DB49EF7F8CC24DCBB6B21FBCA9
378F3E2DC406291AB324571F76E0805DF8826090F0E8B50599CA58D124653D16
16C782B01C91A6F3DA6346482E3163D28D95EA49866360147296838A3FD0CC53
920F91D895F839CB61FFD2FBA296CA4C6304EEE579782AE5FD33D0FA652BA7E2
CEC7C01DD0D3E0D56E6177EE5F609A396F7FC8EADABB465DBA7F384E215C4DCB
E64F807A50A461545107F9C3F7D7CC7D33E6EBD6D9228B1DCBFEF160703E6129
0DCED8D45DD54E2A36E698A616E7906A50901E453BDB2A363EB77144E9EA6F2B
6BD927495EB0EBA5755165707CCFBF8759CE5856881117C7F3EF6D494EDDA7EF
E499BCA56C86467AC573DA9C2724FCC74BEB331E736FB093DCB67DAD42296655
415D110F2729BD1D55E5C9CCE2E724116F45FB2E66AE0F790258851A5C808762
68B8A110BD326F8D3EC45004E7CC08DA42F6CB80A6B6E7C286F139534A275BCD
2F812993DD9C9A1AEB5E7E4BDB4805DFF3A7030263AB060C9B74F0C25C5B9005
965284884450CC2815DF28D5F9B0496DC7A3AA85E1E42741E1538797175C28D9
FD904699C771FB066397FFDEE8E8DD1ABBDF67E6BFEF95BB700A7C1BA91354C5
42EC3864F6E19B379E79A1CC3C786C0DA146C6B0B8E507ED58DBB1F12F613A98
0E1F8967991427A22ED323901C4B83336CD343212131E8B59C2F5D232702ACC5
7891BFD4EBA5D0FA35AEF9F3520CA82D121BF6885BBDAF15248A9E4649ADB94D
0735CC4D14E1D7275427D00C8E709579612F7F74DB6FC218C10C278CC63E2AE2
37EC996B10C0229D687F0DB5E38A8C4DAFB3DD8A9E7ED37186FEFC97790A1EA6
636A88FA9FB4D282234BAAD301A1F3AD33F252C5EEC49410562FC52809CEC466
A0F6D148E9AF19D6DA2337C8283FBFF6005C37AAEB0B7F7217A8DC6F949B9984
72DEF163E4D5ECE4288404448C96A7FF0AC76F732D50AD63A1D286C9180E80E7
C218B1F48E3034FCABA6BF262CEECC284AC29E9F3CA1CFC1639A681ED66C1FBA
666F073D45C84A286E05FF809D4764FE819B6A330E73695CCF2F448B4D4EB4B3
F63E94EC289807A2F9A1159CF328C002B467B19D6E9454CCE36FC19E0A214190
B251818DD456EF658B0398E275514B72D9C1DA5F806EABCF1DD56BC025D69FC8
A0C2FAAC1892B64D2AF79EA2F57F103CA623E440307600D50E783FAA998EBD40
51D23A0CEFF8D8649B48B982DC38D613F882DCCAE5F51233A641B3CFD783F830
D984F116DEA3ED8F0D3369AE629A006BAD4523F8E3C7C6B39A6C972508B67AE9
32613F28CCFFC4BBC86CF31A0C25C786554F7A1F3DE97F5CFD1A941F775067A4
784385E2D02EE1FF886701B1E87D966D3F500E15591A5012E645837FE2DBE3E6
A3D375C6CA0ADBF96B33EC3FCFFFD888D7344B31D40427B8A8BED0FEC6FBE038
1FB5F0714C4B5A0E607E215B5B7F76ACF0FEAA4C9790EB7E13C0E3933B7C63FE
5B934EA34F4B741C3667BF1735C685CECA63507E6FB9EB06AA010311F12AC1AB
4CE3FE8D1EA1EDB3C700BEBA516FC71D740B1CA1A60D4578003973CC3EE21DB1
58FB1CF7E2EAEB2A4A6C742EBC3575EE6378531C6EFA6E6986E68B8E25CEEA67
A59623FC1ED2ADDA9D72DBA627D179E47DC7F5551E07EA4D54ADB6CC8109D340
7279F288E552EFD79C17DA3431E53EED66D16F24BF86468C2FE7EFF421560500
12FB048D6CE2F370BE4E560F8B4AA12362ACFEBC839351C1D5100C625B14CFDC
747B66082D4AD5474A63EA0054E9C3E6295AF6B133348487B0471395857F4B73
4BF8337DCE2FE2E1A4EAD7E7BEDC822BDDCE42B79B308C11897C98E3ADE253CD
09CEEEC0CB1DB66AB072E36E1E04911F40B535B0FD85982C21B8A587D65C38D2
DBC5A07A0A26DFFF7460F10781069490AC1B611CF7312A14B4AA6005A4582C5D
336BCC30EB47749193BE8D457A43F54204B070DF5AC2057B6437E23705C7FE8F
7BB150560F7044BE3E48EFDDA539FEEFB0D2A7856CD4E405FCE0F5EB190D91AE
578E2EDEB9ECA218573BB1A8EF116043A27DD17A4047BCCC7C5F3C563A910778
45ABCA32C7347E6180ACC86F9D665FF025DD8AF514FC3724B5C3510F3C37E0AC
5101D1667C6ED4E8F37F06CC2BDF66CB5A9FB7C52CAD26344FD1557571336A1E
1E340EBA149B4EB99016D1A411FB874914AAB2A415CE3F5FDFBBF5AFD7959B9F
CB127BDC68D2A2F3F07FF3D4FF32046C0371CD2E68A6471E46B08413FC3C7A80
A107EEE57979DB387B2206D2810DB310B7232B2DAA385256C8A58964B512003F
A0C24ED21809E2576229627278118107B9C32345C1EE8C0CFB452CA362379369
31320DEB5371037AFAD093B61E8AC7A6DCF7D49C7F8EC32DC0ECEAFD7E892810
039570D2956289B15E078C2545911BF535F72F7DAC619BBDEEFA855BBAA81704
18F7D351B0936357085A32157AD8E27438A58B2397D69264E748B0B8D01B33F4
D04DC59326A7DED39E247A1C1A1AE49382BDBDE9478A1CB48F88BDF14A268B40
A40B9FBFC4C87FD3DF1EB2464C3C14E36CA41E09EE0A9B75FEB0769F9ECEB1BA
EBF73B818427FACDBC33BB95B9654F31C59A766E931C698A8608F15290FCDBD3
5C535D9036A19CB7B55BF54E96F9B2206DC71624E2E55FE632FDFDEC8757AEA3
1D83D190ABED5E7A7AAE2F41FCEBC7C18626BF58F9E9F02FBAE0C8AA85E9DB21
A3D8907522DCBAE4923C6A2A09FD2F08FE32215C544AB577B337D929E625E704
E041C2381AFCFEA37F3133B6CA20093EFD457C772E428325E56C9CBCC447EF9A
05A8C3F28017DD4FFACC51B38E4896C5044266EAB4EB7C13FE855E790DCF8A17
B61B1D30DD866BC57397EF6297C4891451FD6A5C6AD6D7446F58F56A68650908
224D9F4C31C6906FD29BB51DC947465B808438E6260325752808963C808A4AAD
60422ADD62CAF315F6AE92FACEC55D5B682089AC0BC051CE1E2C06A3874736CF
0DB5F7C8F178479E4F11665402781D80397C75456F5CDF0A4F382A19EC6AD64F
71A9275264800E178F212269154DD8352167C57EBC0A38BE794AAD1601C8E541
7E1AB8E969A76E1EB4092644958FEA2AD29635E70C4DFE2EB0D9B3E1644FAAD9
B27AD5466EFAC724718962B62E7B8C32F412B69DFFEB792587D571FB5C591D95
4CD441662CD1B07595E245FA537FA9EB5A20A97E5C9251EED22C9961B48B25ED
85BB7524F635F9CBA3714C6D60A6BF920C45A64F4C366C1F9D22F53084997C9A
EFE2D79FBE3347111F5093E271DB7E3770B35D253DAF93653F6A23FA145AD775
AF11E188EA0428137D9A14542E3EDA6F7B2E5AA86C9F3D3649A85ED2F020C696
01A339FE6D7E42BC548C8F92A4E3809C67A986C99418772403D16D0E8662595A
1F37563671D6DA0F36CAC99DAA8FEA215DF7D45E61314915A30A22FCA86A50D5
2FF2EF08E240F9FAC030D92BDFBE40F1972DF413E6B452024CD11792BFDAA2D7
C82716528AD4B3D637BB43E748336DCC86A952BE96F1EA423E31340FCACDC1EB
02EE932F58734AF3A5B2279361B63F1D824EE3BA9F4D2EC7B33A300A1CE8CA43
24616444176DB8099D85AC68329B1F85E4B5B16F3B396FE2AE7774F3065D0203
AA140DC128D6F935C44733EF585F89E8639A2096A225A2E5E49D447D8AF9FD44
CF6C1BAD5C5E5262AECC5543EC8199B00B72BE32A0F110F64A1D0D5CCEF38FD1
155D6198E9A343702F8ECF5052333272CAC2FE016681E12745CBE14E1065EFD5
407DA3686080989F6F6D650A9F1EB3A813B070C30C0D3B4A1E9C206E2E4DFD51
D8DCBE9AECF956640A2E79F1B4FD0EB8E0449AE1B8FFEBC43275743B4D7F6605
0673B61EB3189E74F51F3780A91E6A5C6464C8CF7D563D9958D46F39B1A12087
6BBD4898BA9ABA468AE1F24115891FD3CBC2195F75958E26DF8BF1B93F7B521A
C12112237AB23A8E5A7B7D0DC4C53692B35F3CD813EB463C0BD3A6486B0476C6
3B36DA71FE512E5745D097FD4AF5D056E434DEE2AF926B2EE79F7FC4FEFD4130
BB4B4BE01E5C720325A4884507CB51CBA4FFB615B78A4182444F0ECBE4161A58
E86FE1DA2E39C2BECBCF1F1D7B9B776A26078FC252128FA8108CB83F673CFD37
CCDA493234FB93E1550EF8D2DC049ED95B00A8A57834B024B277D3DF062E748C
B61F183F2D72AD075474F8165528CE75E4F40B38B0FAAE45751C1907F8D31619
E88EAB02EEED415F3EE3BC5BECC6AF565D34E0BA2958FF337A2B06012DD1858E
C53DE52C108BD5AAB76C882198C72CDCC958D68EA8FD26F76F04EC1A08B2AC3F
A6D0E8724D2656555DBC0C8C42A3E22ACA7E1BC8E9F897D9AB692E0FB9EC32EC
59E31CCA4516A3C3BFD5411BAC3DEDCE374D48681CE7D67DEAB93F5B5C5290AC
FEB29C5EA2C98095692873D36C7DA24847B66F31E4CA4C7AE5C79D7CE4F0532B
78620582E3731A2A6533A03E7155B33E7CD142FE79F72721862EDB24959B9783
F834CB616FFCB2A23497BA6D99AE34DC459A2F7B3E4DA2B54BED118ADCD92178
66C40F4E60F6E1327D5DBCA645A2A7C770807E6D7E47E1265C753F8793BD2D1E
BDCD749CC24D4AF9315A93F01180A0F9A7F420DA1B87664DA5FD967131273271
9DCC45C3D57EB9B8AF14771E8E751D88B98D2FFDC72F5011D402EC34FD010ACF
D3B0660304725191D64FEE106253FCB3470F1A16EB7B45C1489D3534BF94F740
C2781DAFA5E8A9E7B25A85BD7935DF3ADDE08C960E283D8FC3976FDB4085DBB4
B6B35FB239C28C785B18BE4FC98F3A5F410F562DB5FCA04E8074E4E790F4265E
F88117B3D0833AFAE6E8B8A71D7731BA6F14FD6F217EDA3F8CC687A494FC3914
B84FDC37C8C335AB1E7E0BEC7FB6B7A595C50CF8F0080C8D461BCB8B579A5155
F963B6587873FA31C3A6572740C63EFBE58A2EBB723B7517D2A243F6CB08A038
54F4DF0F6692022B2EE8C6F6B73735ED3166BAC58D9216A06EA6FC7B63B20031
D0F0F99D83D9030B413C2360DD2C553E34BD67851B743C3FDA676AD63C5BD759
9131358C6BCDF05FCC048F4EBB9005899ACDD8E9EC9BB8C5A08E83485047D263
0ED69B4D1869A38068FDA03524022A1D32FA2AE0BF728D2A654E52B6A6C90A3A
725F86627D7C3EC5AF5AC512976D35FE42AACA3FECB401788D0BFFD9F4743BB2
EC5B4E7891F216DCA5A69E917A171E0069A03FB214ED307DE947225049D46E0C
4707503F09811A597A9113921AAC23AB1CAA9866F81A02BDF349FAB129F23E86
E384C043053055938D42ACBF9F0EE86CEBEB011BD5BB7D5930759026189A89A9
B624BC5B352DAD55CFCB8BE6CF6F215CCF778E33BBE1B009AF1164AEF12E6291
751E80E442F845E2B0C77518C027E3991325A8CA08967491C0436774C1B401C4
ADFFAC9862FEAEF4DDC53B3C9DF9700F67004B2AF84C112EE405DA9C709C8B59
E687D87E9BC5E7D4E6B2928B60ECA08EAEB404565285E654272F3B8709AE7709
7A52B760E7A793EE9CFB1F97494D33217A19AE9C74F2AB5EFB774D287DF10DE9
51BE67FAAE69920765D1CDFA88DA22E885D3F0F69ABF7E3C519E9F788A165CC6
922C86B6EFB24CEB6A8D9FAA1A5D21CAD2C0DF2EF9190D10EE2217CCB2B6CD81
BC2A3B53D8A21EBC014FC8D1698581B4696446C89C9815B42167F8248658EE21
266311A943663C3AECFE6B4767C2128827523E1EE1FE5C1D4859DD2CB26A6639
93DCCFFA7BA5444FB1D4E746759CD77594B30A1F0CA26DDB7C1FAC5B175B71CA
747B12E5DBE2873ECB3586A7FC6F1E3AB2914735E11372409DE8C6FCB77DF12D
157CCA03389B4283BA31888D7EC4EEA1E628E44598EE19BAE8C7D3E401126106
9CC056D8BB1BE053DDE930335FF8D47A82B5863EB422B83F9D202257E015A290
29A03D315C388E3D060D0888A980635AA871CB969EE850708E926C9E9C32117E
C03BDF6EDBA40646373AC1FFCB084D7E4065156B0E19DEE1E560691534BDB91A
CA51169EC92BF4C16F5C4F043CE44E6A8C36F3A84ADBF5AEF687CC03D15FE411
663E1336DA442C58956D7B8C0B5087B64892AD55829A4B6CB5A03051FBBC88AE
FACBC968B4457C6C971658B8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%Version: 003.002
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 73 /I put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C1427084643B66BB9181094E29D
5FBE37708E1D8A6B7518A96876844CB66954227A7A6AF28DD075A462526DD5D6
40EECC56FA366106E55C7068997B54B7F0D03AC1AD45D28C67C7ECA99DBEDB1C
E18A79C353113E2E05B837E703278B202112B1C69E42A69D64B62F0E7D8F7E5B
C1F93F0F99EC20EF312046F4B0CD7DAB31E422070B629A7FA96583CF3F1519CD
CF08806F40ACD7BB5C960F21E9DA7FB3C72CBA0801ADE83DF738A4EC94F2977D
2B95A166BA73B60F1C391A53A80E058C1EC1F41F7A9BF75AFA157D9E40FFFF8D
6A60DB84822E6CAC51DAE75920278E70B23F0C1AC692CDBFCC558DA7F42D65CC
B601DF1841A7725FF3A42EE17F5F01ECEFC452B79A5867F1D225ABE0462BE569
47674C0215B6EEC59E8934206969E87B282DB6062B4E418AEF96FD458D76B19E
BE5A7DE6C7A5601135585F1F2149B7EEBF06CC093EB39B6C09322BA6B011C737
AC900DB80EDF5BB7A4DA067E15BD9AE4B54DC2497F5B58B1799140740ED3F8ED
8AA5875A106F1CE2079849C83E7F6EE92B4489A5CB7E6B7ABB6DEFEB942BBD9B
56508BDB6627AB51B2755D6A3F0FFE5FA45067B10AFC9A1031F7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%!FontType1-1.0: SFRM1000 0.3
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1000, tcrm1000, larm1000, lbrm1000, lcrm1000, rxrm1000.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1000 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-189 -321 1456 937}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F267FE330B57DF626EBF73D2779A4A6B462AE6E5
19E5878939A488F2FE1094A76925CD24DAD4573AD3CF34E426708CF06E7EBFFC
BEF5595408106E2189F418D17AD510ED5B6A528E8902AA3A5F0FF52AE3DEAB07
32F06B63E28BB88229E046F4FF8A356BBDDE82DF2A197F2E26CA00D5594725A1
83A89A36487EAAE1AC312C929CDCE50722FA6C596C261E4D78D6C6ABF77F5CCE
0E410ED74287A0F201140F8D9674A7AC585D3CBC72CCB824F9E1CEBD08AEDB3A
A4015CADF471F7ABD9B0F0AF73A8274FD441BC1988A61799856E4770155341D6
516CD0E25BFA59B67AB7E0571DF3F5BA70AB52137D9E6A79EFADBE70CA05AC8D
991D0895C8FFC747FBC0E9A7212BAE6560B9E2B64FFCC58112E64A3B4CF7ECF7
595F51C34AD1342F5678FE1E62EC5A389CF04E82B5F832914B91F921F30A7E32
CA3919F57A2D9DE844CAAAC0DC751C255C9916595E8C9532E7A0A84A0AEFCACD
83EDE059FD06EEE9951473180B517F25F609F347DBA012AE9F004DC3C771777B
BE812787C3C50315D67254A384EB65F260943C6E16B2CDC64E15EEEDC67C5544
8ADE9981A6867405E46222CACCEF79F9DC8674268BBBE1EFEC2187A75FB7FBF8
CB2DB2134848DEA2F9CED443DCF561E7272B38F830871B2A5196A787924EF556
4B7E9093ADD414ACBC10147944D216D3500504F9319F7391AF590198C5957215
07BFEC58E9A051E63B72289930A205B25C2EA38006E7ED0F150D6D1334559D7C
C519A9E7B5C209964A288AA216E5A6C24FFFC18696CBBE6677BEE12BD1270FB9
18B8C3E5E3DF6D0AB7F2FD074AA2047253A370E53B97966F88049499CAFA7418
B829050C831B660CA2E48B37F8B894F009F11B726EFA5AF583FC660BEF67EB8D
505D573E6BD1DA4FE45BA457637E1963BB97C92A21945BCCD36E11A672505296
CABC741A68097B60E1B564EAB0E48C62DE0885B8D074A7642D59CDFC00855189
89D3F25AAAB3B0B477418D70839681B34C5C5B3A15A50B543CA6DEC90D9763DE
314112E205F0733AF96AFB93206C9011D552ABAC54FE402799E8446FB0BB1D32
B7A9555EEF08BC5570B4600A47BE5FD984C7922FD97A6EEFEE6586A55191EFD6
3D205E400235F3CD2DC3825A961298A9522DCE06F0EC9B516770F580E38A02EB
C9DEC8C0BED602BF78B75EBA8AE6BBB6DE555302C613F965E02A12E5A840797A
1562D704283C9F0A171E499CD16DE59FAE4BECC6E0369FBB3907085AB15E8882
990CD72B3D0D16E9D6F78F0F5CCC98C6B3DFD3FB01AB1F6655C7CF35E9469965
86C79196F03715FC56EA60D059D62F6879A6A8D7706D26251A2B807BFE3F0882
B3F9E68748A4628EC396F57C73AFBD42B9952FB62006DECA4E41C4B31EF4E792
6ACA9DC3AFB9C0229B52E9EA6718CCC099B72B68B37C97E610E57ADD3AD3DDBE
C1AB6374E1E10A9648D15DAA283374CAF932D46D885D4654240295DDFD89488D
78F6F6E9FAD73A5F027EDDED348181B8A842FF8B0BA42807334E91D32F847913
7CCAEAD5A4211E2D9A970F96048F0406983E4AFB8FE87CB5FD73FA64EA5B5536
4905612CBC86CA8D7264D79F9F67E8165513E40A45367F7E7A190693A17E90B4
FE4102D3FB47BAFBF920A96507C98E750A7B3B97EFC948AB934461A50FEECB91
C83BAEC39919B5F966C2ED72912F5CCB6ADFF9AEA63A9A4DBB27B0E6E6B7159D
038415262A3286810DC210E042B26C218BCB42366A781D86A0C6607D03A3626D
6331B0DF92C5C166ADC355BCA530CF6C7A33BCABA8689139753B311CB91B69CD
4A10C37D5EABF66B268FA4DC35147244290871E8BBCAE2F14C05DBE11222801A
05B686BC98772CD7C7A9291CD0D3A0BB041ACB65B9E6E655AFE2AF0E7C8A77E2
5389113E7B1D6467EEB4C97EBD8B02EBBCB8F040C43259B5641B675220B47AB7
7FFF546B2218A35BCD867A108D8FD0CCC6367A52BDF1D97E1513B4516757CA8A
B45450A074B1ACB91AA1832811471AF79E694CAA2DC543CE420B1A1C0BD80AAC
1E57C22DA4E77553F9C31539952DB0C2F3F8DE2AC0C6AAF67D767E15D4202AF4
2CD3D3F98DE8CE8101F24BA8714CE86244FD4F8DBDBE9758D8FB9B153758169D
F4A890178DE0E5509ADEFC98D8B3FB555CB10B2B4D6FBCC56FAB1293E855AAEF
3639CCE1810D5C249C18208CE360D40960BF25DE45E97A7B74E287B7467200FC
731E143ACCD729E9479671F9FB9AEA74E20F4A3AF9AB9E2544D9B4B46EFDC6E6
EAA480F411AE8FC823F3F6CE624954400454E6F42BA9B0F3518C6D33958BDA20
700DB0800D9F25C7448970684BC555C8390E34A2E9A9E381B10D1A048E7EA4DE
356AEE07D79FCD728B291A0288689D9A1CCE52D73B293103897076A6AA9E0F47
5C9BE97F17E68242BE9D69173F9D118179748A77C5160932D9BEB212690C53E8
DD69A2EAE2DDD0184B51DAAF285DF6B5CD27B1281FD397FFEDAF9FEEA5B58200
9507CA1C4CAE05EC2FCE3A8ED9C99307E7D2EDDDC5D076DB09B6A1E2BE35B8A1
8D4135AFF9183CC8FA118FF332A36A296F42C6326203FA84A3CB2237B50517E2
8C85B86E8CADE4745599F8041F4CC83A330497355A45288E2B3F57C07F43AEFF
CFBE7A85DAE721F9B0D3EE785210CB5DD5AC1C4AA65C483BDE5670997B72CBA3
AC1C1F7F60A8BFB26A56361DEA174B3970F587FDFD23655357A86D069DF62175
76D98714DDEA83C12AADD1B6B6C6D64629BDED74F0084140DC73E0727BC50EC0
DB9F2D8DA6912E989C1EF9ABC3F1B65428854C951C7470092EDF41007748197F
DC6B983925770274B0A545833BD6986DDF098E4FD8FB41685ED11480F436D632
A3088725A701619C534A8F3333C88CE6F570493C73EC6EC05EA00FCDD2BAD14E
541FDA266C2AD0C3B36FB082DB96196652FBBD2AD977108E99FC959B5DF5A826
9430E40CFE183FCEE44277F23B0D68A83505F653366EAA4C14832705F37B7255
7A6FB3DD2E7EA3F002802820530D2E7F76255229B0C551016F9AC6F5F8B0275F
D32BD381FDAAA1DA0C332A9DDCD0E175E01B99D56899A3494BD1CA5C0B63FAF1
0515F9CC7BFA5C908A09574FB30FF33CF121295E796C9ABAB35BB2166E3687AF
3DF0FB21AAE64B3BC84C902C0F93BB636744888B6424BE19A79D2898CBF51612
1A69CE1DBB930C69B0F2347AA6E810486EB9A53234E97B01FC96053B0C71F73B
F189898C796A1032AD7C90F0613EDEB93DE8DCF095D3FC3082F8CE1BA6B916B8
84A132560F9C2E4BB6CD58B85E9355B1CA091FB7CCE14C6075EB6C89EC0FDA0A
DC91D3BC6BBF0D19647DCBB5E693586E16221DA38E1A4B7AC957EF4565DDFA91
36A016CF0C4C3EE45A5172EBB278239FB4D7FE2935E62D3C1D11106954C59C55
2748F4BF13E2B8064A057AEAA5EFEA931D89AAE980962317F67091A4D6209472
C5987811DFF2F57C704C472D566C12B1D92695AFDB240DC22B6DC316F8CC14BB
93939B5B9E26AC8899CD0DD97356BB4BF87D4ABB7E00AA5702779FF2E9CB1B22
9CDAF73F36157B3A163FFBE3370F7F3267DBEF16D8E80AB9075BC36D1F6C1E88
F0ABCD64C38473DF19B57A5608992A57F5B570C4FB37F1E938735A7367DAE1B6
853B3C02D487C5E6404815ECBAF1C49F2B4F20BF1046EC41C4D5B5325C879B53
7E40FEFC84E5FECE76A8B51894935637F6D5E464B660FEEF6BBF242DC8DF186C
4ED33D753CDF04A78CD18F96BFA7050D047D0019EC21BAC2DDA512714A6757AF
40686EC196567DA0604F5F31B45AB4B5D0A179C0582A7F28CDC56C545ACF5102
874C446CAD65DDE0C85123ABF35E3D2F65D6CC5A5031E331E892BE0131EF7C62
87E8933A4FA58300298B11C7DA727C7DA9A8D81CB047B3AE8446D1FFB0991257
0BC0441E063459A95A384051BE89CBCE5CA0331F5632F4B2BE684B749A1E0AB5
6C0DF8CEB3598DBCD8E17363864CC8AEFEF3BE09E104E14EE9649FD4FC798ADE
194715794B7A1BEA96746DF927B1B78AE0ADDBAE32DDDC91B3CFE7C6E4A5183A
D804298156DD45DDF06B651C7DC3CAD527A8BD3A6DC4D29579B6B21F87917010
50A1DB98BB6A96D8B52302D9B7E47FD932AE04BA89F6789A7B5889ADA2D8866B
8CC7AB76EE17AF6E15DE8F2132C49C352027D93395AE33052794A9A7F1A49609
9F1F58E44F4754A197E30A7E5EB950D13A9A9B70A14C98A4353D44DC65E571CA
F6CD0F5B24F400933CEF3322C4F892D7625377A1F43D482CDF7EF329488663E9
4AA30411DB14F5613DDA0C4227191810D79BADFCCB04D28D8BFD350651B8DFD3
D87038C6247A14AD0EC93784B7C00F56777DAE0D7E0BD6C5B6CC2CF2FE7F16A9
B49B13F432DA67D18E425B8FF5A0735195C0EFD93E3CD3B6A32946769932A190
4106A1748FBAFD245BBA3DF29C68F323E4BEB5F77A236307CE5EAE8A0B698717
87CD959EBD07D4770BBECF012E4F5BE88FDA3521DA385BB61C805F2DDF3E2218
06D7B4826A3ADED8508BE3A831AC0868B467BF7DF14590FCDC56BB5B407A91B8
F6CEF4D0161D25F4116AD327481FFE21B11B3054F3C9BFC9D62338B3B328FF3D
CDB8299A2C0FC15DAB7ABFA8A8D227D42050A292E989037E08E944AE611BF4E0
02ADD3EC484AE662E06B4AB96ACB0FCD92FD5D20CE56AB946AF7132B606957A7
B565115A8BC2C71AED17F3C26F5D048F1B813F43FA03987F7CCD03D310B1535A
2F539B4268F981C1827F7C5F36F10248E95FB98512F623FCEC960B719C2782BF
AC1EEC94547193B9DDBF29812BC67B634AD60668594C5B565555CD66C43738F8
4201CBB0F4A133A9C0661DFB09370239122D03587930F9B57573FFC54DC3D4AB
7C4103593003F965305B168ED629EDBDD2C8142EA8F0B8522CE62B82FCF88BD9
A5D4E544B79A91DB54474AB118665FDF9E387345C9FC48BCA0678D98BDDD401A
88775433BFF517E622E5E200BDC0C8F32CAF4ECA0423E5B040CBD5E7F31B2CBA
A487ADB13AA5AD4F5C84F9075341582702DCE4EFEF3A673DDC442A0BE94A8D4C
16FFFEEB22E19FE2512E9B8F80050E4C2E794365DACDEA1F9EE36A63E6F884A5
6C619306C9DB8EED4E05E21ABCA13F9FE843546003A2E67AB3AC7EB56BE27A9C
F6D25C105ED983DBB22B6FFA59AF34878EDCEE5F1403E30D2BEC787DA055A16C
32AA34DDC332A6C76D0E0C3ECBB30F4304FE670EEBA779CF0B02AE18784F23A6
23FC9934CA40F97D4CEE69EDAADC9C7C58A544FDF0D1DCFF0F548353AEDF237C
78CACBB5CA0E20A9BCAC252E0F4AFA0E1BE834F7BB1DF5A778F68945C7C690C9
66DA9DB1DDD53376683298B970AFCCCFA9B30FAE7F4A9529CEF4CAC3267AE9E9
9F65A25977EB3D8813425FA7F81F9407287810BBB9DF2DC211C92D2C003D40FD
E685502EED6D3D574A2BA72A09E7E7378454206904409E9FF99BC9BBC1556E8D
473A35FE9BC055D128AF38AD3680A3C256B436D832DAFDF398663B091C35D612
38BB2B732A1B2FC4B1F942D87F7048642ED90D3289CE88598FAE9D20329CBC5A
CF9F2127AA88204206E75D9A5C01D1DB7849EB509EDD54DC1B82A447043CE44E
65F0C799DBC6BB8778E2EF974F873CCD5C71AEC0DE56CC98D1A219CA36ED1F9A
E7F2F8CFA2EAE67BF5C1882C52C2DC01EEBBAD4BBA5861AE4E48E9DD4F9CBA6D
04CCFF117FF5E67E6E302BF51AA6AB3D4BA2A61839FCC9E10BE0FE1E618E4BFB
44561128E0AB55B744867CA8B1A71F63EA804BC63FB0EB6EF54A87013494C30A
922F7D0080FC2A395F33B94CA2CF3BE42D85645C5D725C1EC2AAB13F8A2DC709
C6544CA74327452822CBE548FEE5FB5257BCC840416783BA0562AB6D2AC5A930
BEB817644060772BA2A21D43EBD5A856D8BB744D1A2E50FE03BF04DECC857C41
244923CCA2E1381DE84FE25767C311C5BC6FF8AA1E10482BF3A42D36F3CF6DB7
9352552913BDBC1A3E21DE66D0B05A9F13D91798CD1C3101CFB8F6AF64DD7894
AB604FB4341907ACBFB8A1E67B975830B9E88A435DF161EF9A517C3A4439C83E
107F0611BBF4E287A01273C71907C59CFEE3C5642BD6DC838D2ADF539137A9BC
D6607E25DC313494F9674D6A259A56E4DADC1E5ABE8CB479F1F75785805184F6
5A634041BD8CCC4FBC2D03DE2C6B2D298ED89ABE2B26CE562FC84AA5E246DFDC
900ABC2FAEB0B8D1C2699E56D4E976B79A51E1276AE7E1D39D168818B5607ECF
48B39681BE1EE03C0D11AFF3AB46327AFD49DBC0317AFFD85FA1A1CF898804A2
187EFBA3B8A3994B694EE2281BDBB8D46D395682C415E0C61731D7156C5ED849
C92761955190A89766ABED85A3BC3BA69851CA7D5E16480AFFB4A7993E5C74A6
4CC77EBDEF2B15FF13A4C29FD895A6B5D5A01810038E3C422AD6A6011E641B73
BD918AB90FD568DE28F394F6FDCB6E34435AC61CF2339E0ECBBAA02E25442FC4
DB96C15B184D10C03030BE87C9F1E5CE110CEE6B46717AC6A6D0E455FB0E33D5
7BA5F3730400301D1BA6D956CBC6C5A5418D2B1578898052C21023151494DFF0
DCB32726CAA04C99BF38A31B90D641ABC065F1ADE9DC4C9888AD0D4D5387F05F
00CD4163AD65481CE38557F64D085E0B917121910B323E0DF559F1BD86E7BC50
AB82D47677C28C69BBE333A7D19B7AE622D78A168DD57786281466A7C86EB2DF
2C80DCD9066B7C40E884AAA0F61F3B75BB036ADB5FBD9FEFC0F4782E29288AB0
A3A6D62E40041051B6FA6448B378A98BA5F415D60D7BD4EB204574CE4553A895
37F385CCDD0378AFA69E24DECF644DF92D8B8F5891A9347D516A08D004B56779
3B3917C4EF9839D79BB70855669D98B31DD25B1C9752BA469BF86FDBC9BC4015
422C6DA9D1EB5494174C3FDCACE78B900C12D742D1BCEB27493756644E79D321
0E34B853353B32E939577C47DA237B6439575C23953D5B8A1120F7B4F6433D51
5D585A3F9321558D70B557879E3C2C23378E7B9776EAEF8C6493DB31CD5E413C
6B889393D35EC332CCEA3A2704269C835C4763A6985CB387387BDD3C1962A598
79DCFE20A390D69B41EA2B5F23722E56DDF909807E51CDA9CC6338E19D26A743
8C879F0E77C5F82DFDD90063425D1BCC36C3C3B945C65C7B77C7BB8D1DDD8127
6D70FE57D27D4ED8CFF931E013208B63AF2A886C50A41A9D19821CC1047193BD
7A2C0C6F0E465E97444065AC974779796CFFF55D0B200FBB23DC1C93A5009DA5
115C8C5DF991FBA87C02235C70B4BD7F4C72F0A343B79912A08712DA78196745
DB5120B5BE0C978987E4D0BC8AEB38935B3145043EBD3CCF928A3BF757979D98
5B3EDB1390B9229E5CDFC926F6CA83A98C863702E1412C2BC6BC681ECC995611
CDF3631E7EFAB41BD233860C52046DBFF52496501133D39C10590C070EC35F5D
B0DBB928E45ACA61F6B0E2446524BE12D9D65A25842E65EE2E7BB01514BD9DA8
3521EB64AB7F460D93511A37CD0C8A8B3F6DC8AE75FE8ED2D7879C8C8004101C
CE7293B99E415473B4BEB3114F7C6C1C8CA76D871ABBE0BFAF8D99EE339BD0A1
1514B375FED3B28CB3280307FBB02118A055DB5D7D1B2624A13FF4989B5C5C56
000A41BDDF8B601D88EF5573B5DB16572FAA7C415017E560CDF608429DC385DC
C9929E1BB1D4C07F04B9EC56B26E064A0D6630023BEA9A20704CE4C6AE71D5C2
D8E9983CE00941BF17D6D18ABA2A6FF34564E210312D6BBBFAAEFDB2BA225C7E
BB46BC5E76EAE93E456ADFD767722AACA64E30DB40C4929D701409858774BB8E
A01F035C399EDED6AF7A70BF2193E94681A944FF1D030767ADFEE9ED0304F38B
FA0E3046EC508DCFC53C4577F5D688387BE87FB07BE7B67BC9C461BB0E2F6D91
7140DEE43FF956B998615FF8E547CFEDDD36E648D667AE444FA37853DE6965BA
42DB0335D43A66E24FB68BBBF08D5E8B5C9AA1C3ED99501EADF417CE00DDE8DD
468DA18F23CE3BF9D3A84A8A4BA542E760F0D0CCF671472E9645A501287A1230
186C1DEE5D7219D90DCA47FCBBAE51192E4A5DBD396F2E9F32C73C004C5FD566
D91C7A71C06148C4FC1983A41D087FD6F913F1D816A28D7BD88C4168107221A0
7ECEA56F82191756BB8EA9F89654DCDAC73A588B6A10EF33F894F6B2C7D5F82C
1968490A098EBDBDB30BCB77D5124C8A46D164856F02CB3F258D2B99BAFAF318
5046A500CC449946BEBE440B9B44859111AFD0E2C07F20C92F99CB8EADEC0DA8
EB06A33161A33D521D72B741A76FF8EEB02D1E24AE3ECE541D1B10BE8F262043
BEF58041477E2ECDDE5E9090B4FB7C6FB85C67F3D25B5ABF17A2BE196E5E1366
EDBD5E6438205A75E8BBC3FF6B3D567ED38212B3302C8F11D2F2204DFCBB338B
7697978550FCADC17D7E5A070EF9E433C66D5C4F9EF8EED78BB545B99359BFFE
524858A0806CC6CB2BDECEFD4D785A43215A8CDA0FF2DFED403D0E552207DD97
30A2757C030F89B9DA8391CF3F1AAB824B226AB1A92113C51CFC8361168487AA
5207B8915B1214147B5D69AD0F40A4E66A30A92303881BDFB392CF62117F1937
DCA7EE7996108BB04ACB77531FC60DF9E5E30AC4FB02F3F5CB0EF1F534A5AEBF
45AB9E4CF7B3F00C2798125453AAE9FAC75299D653DAD14A83E5461B0B6603D7
2743A8F78F5959CDBAE2D2139C2A883F9169ACB97BB0F9A0AAE6A9FADE5756E6
FC44A52E5C75CCD26C3A12706E12EA105708BC4BCB87A27F703D2377C0878B69
C8C8E6BA568DCB81B36BFB0B0C526520FE10A38A4E37D4F7856F481E25637441
CED21873F8CB4A1C2D702C2275C4D31FEC75CB06D440E6A4213DC19BE5B69F45
DC10F7EFE75804C70BA98889B49B42DEAD15A0C052DFA9DC98B411A4689EF3F6
B9EBE5306C9E5B0EF2A8C3AEF8DDFBC7E90A53B7A29CE51F35562409ABD41230
FACB55995B279A1EF71555951FA5A78EE72F9AD79233C4903317D173CDCC9750
DBB35A9380B57AB1597065A98F2C88977249C80BAB7F42F2C78F42D3E40247E7
619B8C69F6802BE50CEF2C847FEC4004F906E8DB9E45D5B17094B97224DECA86
0819B17F95F1231687403DED97CA6895DA5FDCC8B012180CD26C90C4DE9D83A0
8479F3B1E8BCAB177DF4C4D3D467A8805ED5563F49920F9A073B09B20BC589E4
A84253FAB9BD1C6596BC5FBE081EFCC25AAAF3F7A11D5553F3C5C3B96B628FEC
A128568AE91DEB4C3F859B9D49974998E518962E37C88C1A2FBC02F1967DAE6F
150EF28D80A56360D5D61E8EBF0F4A9571E5CFA6BF69D6F49223A64B5350CBE3
1C041053517F3348A94380C39AB210921934EF6DF8A23BFF58788E63CEA65322
A74002BFEB6B8665BB28613583AA16B2AC817A3224EEB35AC5458A55DACABE67
6B128D36BD86E85D6E4534AA73EF185F3D60D8C55719B280588D2D0A2C740CCA
CF6AA5E16CA5D6ED6232C5F5C85B0FE0643FD41340593570A3DD40E930BF7ED6
D4E13297D788550DE33C0B4B2D166E74FCB3A497E39819D72E0CFB59DA7E1C6E
7A336E30C092741BA7FAE9E975D5183BC45F9B5047BCB369B984A3679C551707
E8C84FFB41ABEE5C4D9620894B474546AD4A13953D17C8E671E52588E38B0E04
1E765CAEFC99C0A632CA1902B7559B78DD3AC6545FF3E3286ACE0F31713AAD3B
71257A2C223C2FC51FCC2F27BDF912B374AAADE7A834E3904D3078BDD4F645AF
270C656ABFE1E9414264C068D6063351139BF189B11FC9BC6593A5DCF19A638D
9662DF732D709DDC52E527C49A2A399A9A5A1979DD84C5DDF7B854C4BF36A12F
8B97F63A8D6BAA4DF5368420EF654A1850EEC7CB5FC6905CF4A7E3E547A418F6
F398DF8881D59E2A92657A89FEBB7411F957F9470B799F0EB54768E2BC40F003
E92214BAFF4384E6CA7738C88B3673D31EAA8AEE593438E7FF32781DEAD1CC82
3871776F82AC4234A8577CEF299C5CB3519EC7B7BEDF2E3958065861CCDC14F1
0FC7822BE4025EE840C1A9C8716159B63D45B3AF2FE2CDB764070AF5C14C143E
2320B1F0298F4DDA3C232BC8E2B001F1F669E1D9B3FDF838565C965251CE601D
A73C2B51F37D2DAEB9186E2C5B0F682F24890DBCE037952AD69AF73397EADC40
EA140CDEC195884677488AADC240E795C9CB32CCBB94AC7A4BEEFBD550938934
F06C790940B4A32B0D0DC0157687ADF64F4E36952448DD1926CF3E4C6725EEDC
CCA71BC1B6085641EA78916FAAB7F7E18374394F64E0A98976A8A883C5D2B3B7
895B412A069EC53FD5E9C745E978091C4C8B290A8683F9E7711B59DDC9ABB2E9
415DC4E2C1F36FC4FC1B46FDA0CE7F3CECDE6F53580C3A45C7CB40919D63DF8C
1680D7EC2373B90297908EF7044A56E227B55EC84C02CB6C35FE243D2776927D
88568F7F502C150ED39CAB90BAE6CCF6C1246459E7AFCAA162C26E5195A29DAA
B15D42B9817E73A240219BAE4A3032CAAABE8EA35F571A6977855533E74662FB
A143242CCE50B8DBD44016C482F35782BA085BA2213F8816F01183C3CBDE0456
F58BC36AA47F6B6704310B269842C4AC04C09EBC603E3AED6E33EE942AB489D2
3363B01D37D363139490B630EE4DA994B8BD2E81E779AA4CEE9FD614A2976D8E
3053988D5D677701882F91D1E51BCDE1D62CFE54CC36FD8148AA473B91FD2E68
B4ECB77FF5316FEB64D096AB0FBE450EFD0039F65DD95E42F92617DA74F2CE02
AF56F3070375CDFBF825F5C4E35ED3D1504D95C93437EBA7B80892EB8D5A7C48
C7EC5406DF4664A1B2D402C5C743091E7756B469730545F154330052B4479B93
D6997A5F8CE5847F736D64461BA72292473CCEADE23ADECDE189724C38612F71
B38425AF9C3AA9EDC1A1C5099B4A6F608C3468D93D38239C1FB71613FCEA39EF
7671961695CE931042155BE10957E39C34B4D55391ABA0F5592AFE1D648DE204
120A38C83212EF1647F3881045717D9B6903F981DD806D9A0C73C1316698F13B
D0D7A94ADC6377CA469C545315E5B7C88FA64519504541E549FD4C2C122F9A94
8F55AB7F5921E396AA1D8AD2D5181ECE959BA724AF16F2A6F8BB1E84CE36E93B
62AC49664B158079CC7D3D7905B9A493AF229268DBAFD8FA6277DE9A3DECD483
E00BB9D027990C277ED3404015B7A2A7EEA73ED0D6C2F1BEACAE09B2B8A1A9E2
0AD3122D5ED7EA50341411E64FA716E5D75EB726F41BE7A99FD9F689460D5705
39593E9EA7E08919D5374AB457A9DA5CC2D919ABB2F1494E869C7F024EBEE0CB
64D2320BFD12CAF3BF45BB7CB3762C2369388CD6A721C50067A8F1AB2E202358
D30803573416490508C7306697B7DA969E9299F4BBFAB04C531276C445E8034B
EDA3DB9C1C7A4E79FCD1EE08B5020837031D7FC78E4F53F5C5125253A6EA9D0A
5E2F2BC44422908B87B671EFFBDA6FC60D592261A181A9786689DD072A91BE85
FF1C6DF2C656423B57BCE16F96CACCFBE56DFC9DAFD054A066FCE1744918BB3B
61A85E1B242EA8FCBFA36A494A7B90B6FBB61C4FDB209FC8F1F1C4D783F0A776
6FDADB5C90E2E028F14B6850C6E72E2818087A03485AF5AE654BD6E4333EF9C0
76D7E96B174A18AD56A6E1ECE93A29ABB1A89CEAE5AA1275134CA11E9F5F226C
A842C3FDD64BCFF8314A84355221220F4CB83B704A247C0974EDF99C9C81A9EE
D7AFFE9148E5243956EE92AA6B19CBAC7FA23909C302428582641B9148D7D81F
7A2F91D0F70E62945833752A0F64A51C779477912A0E528D6C2F9CFC10DB0404
EBEF7A69A80820583A2B16107A8B5AB17031AC0BBDFCB5AA4FBC25375F17079A
1E7FBD356F2419B3C1D8685DE22CC682873201C3B7B4E38A0278407DD34C09FA
9C4919116B7CF8479C8317B087D31A750C934A121EA59A946E3B1CDA55521960
F13CABF6632E64C6845BDC612BE408C4F38F3344DC414D8847242D139B9734B6
8FA0D624F0FECFBDEA6B2EC548CD5532BC0FDC8DE8147A990F496C67AD5498AB
F4F5E382190DDB952A5BFBD6118539F2364F34133366D8201134E20C0E491D90
75EB2712A7A06BC09D04EC0E11FD366D9A96AF27F6D7464A20568A5821FE0C12
1663152BDE9805C0D8936EF7DA2D8E95232C0D86B1E0F31C6AB88742F9B19A49
10ACF280C40778086636EE2330258A2D395AB1CD58BB8D326FA4452C327B32C0
1812FB6FB8858C0461744800DD454C13955667CDAF10DC703737FC28F8145144
C9BBE029B3AF873A6572C00114519FE48744366981D2B6A5F5134605066A9831
5681D0696609B672DC542CAF9980623D1E9B8161C6C2B4F8077C023750E433BC
F9518C32F05364E6039D11249E08268371AA4ED124E96C6907D3464A094B3BA2
3464D8367ABC48CD9BCF0EB6A25A9FA3F16C8D086D655E4DBC9B5A9F9F764617
AE929677AA54CCD55D38584E17F68DAB965B7526D64802E8E4395AC3EBA5B99C
452AACB5596E98AC97939CF6DA4A86416EE77C4DB927089A4A2402E3650054AE
BA3CE1C4A55321D8A51376E8BAE8CED7E48E4349B954A69B4907857DBC55575F
9CDD2B9A4E3A6BFA14542349286EA16BE333BAE1361F49F51874B686B9D99C42
A156BCBDB443CD27F37ECF9F6101F24E3C34F653F04D1D939B30659AF6A1B0BE
EA4E452C4FF38651B9A9CE412DD1C578D809CE29EAEEB60D1397C9DE10F115A3
6268B1943A3353B139D55DD098B224505ACFDFF6C1CE6030A22BA59FBF72C0B1
047C6AB8603BD46B353781E38BC991885E149F289E570FE2A204C1766EA678CE
74750943A08A849A5758762C553AE44E40C042E3E9B2138C2EBFCC9E459821DB
636970CE0262DD7DD718A777AA4D1EF419F79D40A115523E1498439B0B2F6EB5
96987EB509A7B60824C35FEA6FF4A987565E60F7ABB4469C35D3A33F51F82C23
036C9F7A59AB43D167E258487ABB0BE5FFA2AC9367BE9C77C290663CAABF0304
AAFF46714CAD6270EA385EE0D7638554D25DDA61065136982394CBB4B698B8D8
A273364DD2FE33B8C8E73F6F1640E6C7620DA0F9E149DAA46BDC77E2D3182179
1E046206AC4710E28DC0A65755A60543E7BCB3C46100953DD997A8F0DFF1583E
ECE1738ED1FBFA9BC63255BDB4611E215ED8B986AEA3FD12BBBF883E03031519
05E4F4B63B01849E7015F7B1FA10CF01721C78D475C7C546DBC353CFBA651FA9
6C0DB978245D30EF69BD8C36CB1F1796350142F5AF29E572FDC04145DDAA6D28
8BFA477B5F47C74639BF12A59AE0C67EBAD888E912290B57114279C84127D445
8A16A9FC4D14B5F6F391487DBAFFE581EA7EE98A5CF0FC2541C1621236F994E1
5517F499020F4817FC59A4ECA81F8F74FCA3CD8AF181A9E53403648D62D20BF0
35B711B532D557D51D00FAB80EFA94729E9B32B6E86D02873DB1EFAE66BE6230
67CE543965655B9ECDFB69DDCD67F62F1B2200F7CCC2B498503DFC49C85DD385
CE4AC71FB980AAA1224DF579F344FA4693D200E7F095C3CAF41EB8BAE026D869
C9DA294A8FC04513A663DAE5B56477A73A3AA280E6C8FA9081EFDEEAF41682F0
9DF776C5071FACABAA80012A2F191AF1A37F3E5EA464A6BD9562B85138E89BCB
E8C20FACDB69432AA99EDB4AD13499042D6190B336AB028A5B0AAC963E8EA401
53F8FF5A0E79E66C83355D4BE141024EF93A98CE4E87E3F4B2CFA52B356FAF82
479CD35E8C6C42EE5489B4B5378E41D211E39FFCC964C42A34DCD377812DB909
C7D0F656B6DFAC960F0F25BAEAC6B5D56D231DC0290CF7B74CEF942C4ED9D198
15DFFB6CAAE93AC15BD0493D9640938494F69CE022CB4A50D83C3BB4BAC9583A
ABB62576332E151D50579417017FEDDEE91A50177E426510182B10A2ED1AB022
97941527E11AC7058D5CE3B76E64A9444D6C9F734D7603199A39A0CE1071B98F
E0BFDDD121BECDFD840BA9796282B50B7EEC0114841E6CF0B981768E02489764
BF7C5E24E27E36A80FA0E15E8133D34041650306FA7A2DF9970EF698A43F5544
2AC9422750B4DB098CBE660B923447FBECED513D337B88978277A07825EE287B
82C2F9877187B5EAC6E9F8E3E37FC5DCC8D626A381B35D7B2CBD1A1FF1A83DBA
0C9197E26146E620C084974B5FE3B25A985FAE537E7F62129B7A712457C9F942
A91B774E179EF13C570324F62926A9BEAB9B92C4A45DA52ABE3111405AF0D7F0
7D36ACF9189363ED6BE7AB6F33F973404CBAEC63887466A332EEF993D15A8F1E
673332D441C29503FF2A5C343766FB074AF6DE7760A58BF16F341C5D785F8389
B2E8BD9477546CB4ABC8710E06B1781BFAB6AFBF09E970D482747B723C8713FB
F2B139CCF2A42E3B27A23B154719A240B26F76899B494B856EEDEBB633A14077
567FFE72F25FA008D6BFC2F2524E9A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%!FontType1-1.0: SFRM1200 0.3
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1200, tcrm1200, larm1200, lbrm1200, lcrm1200, rxrm1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-185 -320 1420 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF049F26DBA77FA20B6513D
285BE588908C3BAD6A1BF20F213E587F1372774EF31D66B237AD60712D60BCFA
83574CC5F88A6B4676356ABC2DCCBA498F4272476923789659CA8836F2FDA94D
38271FA2CA8B77D7099705602FEB41085F6674B7AA0DC588C9ABCCBD9115601F
CDFBCD7A8E3CFC8B1E718E576254F5F05FAB25DC253CB561EC3604749243AED5
76898EC99BDB1760B0CA75CEAE3FE6FFF1700F64F585BE9267ACBD5F155F3122
732792E17022F23B1F46FEFB0696E5C2B78DE0479F09B6512035B9C488042B62
98525003ACCAB6C8F36BBDDBF6E82F5CFCCB418706BBEC1D4E42086E70847405
3ADD1383ADD34574F2C6C64907B0561F107A259A649BB525F0B74CC3B1F42412
C4F81A7ACDC6A3F37DE7FC06DEF21B9821DD39D75432AE3881E431569A012092
38FCECF1BE90B0B199DC4D56EE18658B2818B69FB6836486BA302CE7F6EB18CD
7AC5AC6648097F65C8AB851E9BD1696B9703230711F68FD82E1DF92936A4B1A2
CCE51645573EB0E762D68A417AB6C0A2EC8756FC9BFE5972DFC4C794E948A970
918BBB1BD7B31F9B1B323EB2AF8D41A153CB1B1511F43560825DB6ECE30C16E4
902BFD1EFF59F06984F36F284553AB3F2C7901B37ECE058F5E477EC9C629847E
1C7A3628DB7C47C099A0DF53F05ABEF94A760232985AEDEEB7AA05C95273179F
8A1AEA30BE626653D22F7725C28498D776493AF6DEBC59D44A2F6F26E5DA1A77
7B9EB9D897130FB3F6017F80AF21E4FDB73CD96834152BA948E1EC4765B253A6
565F51A1ED2AC8374CF4DB767E7F3FAF13F0A1198110F554CB6735D3C2DABCF4
0C0A431D263F22D091D0F560ABF5968868126430A293C6E8A6A87593E580B110
E15A84AE30E4846980EC5C1FB6D4037D7E1DE8CF57B6A60DD4DDF422075F85BB
0B1411164E99A03A3591915372454A70C8CC75EEE08AF87D35032DFBFD61A4E9
F968D1F514A69D62B30B89F47FCD45A41B423664A7862A1246B6D7C5E2B352E3
D5428D2B6677D38729C5752DF835EAA366A11F6C7564C80EB1E0A3EE9990ED0F
520EB2AC073E63DD9C935504D14BAB14A4305B3D64638B6D952333CFB7CC93CA
D84B6DE80B35AC82623BE64BB6C1DF9165E00D29054A5911CEBE09A2054EB39A
7894F49184B672F4AA1143A2633647BCF502A77F12506C02F1A78AE9061F1497
CABDF651CF5ECC83877724A90D67D660CD4C54EFB79F9A6C1DC8EBDB66E8D709
D4C0A81E7C7EDB6CF1E266B753AF6BD100261A6CDA280902D3F0D15EF4042F54
5586901E870F2A99727E9B64147EC20330C3E54FE01AEA9875DFAEC86A0B6F39
D89E035185C3A6B25CBE093FA5C7BDCF99E5C68A9EBBABB3D61A6AB4F30B4D7F
94F4B4DD1AAB6C22FC9A18BF46B81CB362B87BB87E9552402C35490285FB83C5
EA4825225DCC23DF406DC5CE8E67FFB64DAFA43E89D6C65BA6C0F41AA44EECFB
DB8B9ACF11B6ADE903B6EB177A00E2B22593F7EDADA3A7DD72A3BE1D488E5BEA
BB9327D8B0187CC87BFD35F4591D3F63B87490338692E1E8CBC869CA13C68761
6276CF2A654946B67B1885F915E2D53E923D1A7B9D373539E8AD0C47731B05B1
7E627B68C4C1C9FBEDD4234643720D3A7EE90502081339CDBD455004D38302E0
FA91517F04289EEB213EA283590D0EEA039CA3BA5694C0DB35F68EDDE43F0CC9
DE58D2EFEF8E3D81853BFAA0BFB73296E70ABAEB606ADCCEFE9AC3EC7736215C
B144B249E1FCF4A66590502254335D9505C9A962FF3A7D45FF770DB07AB439DA
BBF81F0F47330560107A6101A5C76F54C285DDAD4E7817C6B93392DF83CF924E
00DCD4DD8BEF1136AFB87E24A20883FF87DD69789556A974B8807C5F8030CA58
5301124D8A96D5B23FFD181D66140874153114B81A52D69164014ABE126D1E47
6752720C0CEDC0AAE2EAE314CF25CA05C3D569CE8871B49AAF2F371CE632A913
4E4735863644E0B7B8CCDD82F1709F81DBA6440AD57B94A928E1F15D948C7EA4
105A252E3AFCEB539773BDCC8FE919D55E1351579EC5C3EBD311A8EE9A9373EF
934E4C61DED60F0FB051231ACAE4E12B03013D7B9BFE305B9AA54B0AEC8BDADA
C3FBFD3A4ABFA43D98F2991894B0E1EA7FCEA4843CB86FC4DABEE41F24ADD548
82C163617B77D65D423C565647491E885469725CF356762F01753FE97CA9643D
7EEE4365D5C807298D61C1250921C4F14BDBF39D08F3896967A5C9BF25113779
7C1909EAD87BF0D60C43F1AE79FFB1A23620EF2C324D5E6F6D00CBB22BE70E0B
AF849544750046F6031B872CEA4F6843BC35E05C73313978F2D74A52F2D52095
25947CFBD1D90A82EEFAF5750631A17DB096B594B6C033ADC43EB9328B5366C0
A8B7DAA7048C0028AFD0E17D3A435C530ADF039B402213DF9BB13372632469D8
568F819DF9554C1930B7B3C6FAC84650AD5454E5C0DBDF10DAF451A8D99640A3
00550839FB6356827BBB65B73F31051792CDE85D8598F0825CDC92D8957797F6
0CA60789EF683AD4C7D307304177D48E8515FD26575A917C9E7333337E070509
2783D66F0F50B55270EC8C75BBE78CB32E0133765517039417C35C57DE3B0D45
97863BDB6F0216EC699AB82DA5AE17C56E64998CBEA5DA56916984CAD87625ED
98355974A608CB758F2FB28EE42A76F11607C84F944D3FE51263A8DBA84E93A7
BF7BB6DF9EA825E6DD1B38F09E0010533BC14E56C291413C50141070B380466E
377DE82A00329C607B7DB839267F83EC08B4819411F01130BCD93B9C2448D878
FA41518DBFB8817CEBBB0FA2A3BD96611746DD6C801A694FAFF1A7BE8D4C6D02
A196CAC9BFFE850F28C2C13EC101F217D4EDA1413004DC220A1A4EC497DABAB4
388653B248A9D14D7FBEB1868535F630C5D06BB3BA30A4C09EB0B23BA7FF85C6
1C5658811DE1A20A5C41F2D563B7618E3D2B84E2EDA55B7CB1149DCB2E9B67A5
0606056D1E69D9B73565331240DCCBC194A838FCA24DDC0866A5679C4FDCD237
79D12720DBE461FEC4CA71F96AEF2B847C4CD45F22BDE7BF32EF9D35258CFF95
B4E9C6E47200F0601ACCCB1489EA6D35AFA2D9FA93CB7462632EB4DBB81FCE10
8B92B759751E10C76409A0FB7A37154B996DEC7B71279088B7B0B78AB57B3646
24D21EB479BE0482EB9912B64A529DDF07397332B2EDE5D172AEB3B74487CFFE
6A85ED76735DE0D9B5D5AA9F42C1330BD3CC7041E3062B67193F4965A0071252
8A2500EE061CB4F460AD9C333DDF5AEA23732BC704F109F09AE6E3A9FFFE714B
C12E520AE53489CD1A6F52BEFE8FB3D49A74847C150FD9C3422D235663C57991
4D39D71C5562EC2EF5FAC00CC5BE8707F1C779E913160A5F9519EB11906488BE
56D364445E210C0E0041AF22FB8A18A571B3F379C70C8E445EB8DDF55F0712FE
FDB965955A3AC5F7C39D2AEF7BA32755ACFCBF77BB4C4FB26D219F6A9A95C90F
D14DB51EEBF226D020096E621AB46D4B82C6C56B00FEB14BBA989404CC74F80F
B3B1BBA0FB4E5A756E1995D3BB9430A60E6CFCBDE1A0C7885666F81538769FB1
FBAE8B114A64B7FE2F3F45C30570ABD975B6AC2AB13D030BAFFC09271852AB2F
B5CE429DBE1FFF5E4E8B0C7028CDBE88CB20873DD60FAC84A5D33E2738266328
3EEC7F7963A8F6FDBBAF7DD40307F715DB7144798A128FC5438BA4B6E8C23F8B
B74D1B1D6F0E5F96C2E836A0AC87F4E304CF614566AA0632C8FC19C9782B0EFC
EA62D9FCAEBC09851523FE5EA246AB47C568823771EA8AE524535C290F183BF3
0D80036436F7BAF295006A0F3041A92C8940D99D55B381ED83EC28F81F9F4438
61AD4DD42B5E597B9C25DA91546C14FE40ECB40DF7181104E45B6CD1F736D722
134CE36ACA5233F4A6CAA53CCCB664F2C2E7E45144AFEAA96DC29BDE60B544AA
FA5507BEBFBE1E9568204D34D67FC30864960466DA7B6EA838F219950F42B502
FB49C7BCEA1A0C120A1C8B44C75D9E7FD7E10E38ED96FEC84A9FAC645F2AA8E8
E2E9ADD10E3A378727765F1B24990B905661B592F885E201E1D8E1B791D88795
EE88D80C57FA4DE9E4F6F5435799D3F20879DF15414DB1E137800DB5F863B632
3769828C5B25DDC0992AD79D47D1445C591A1A14D969B68D60241FA9AC906AB0
775F80D8D3CF52B70682EABF80388BD3F177CB73C7BDB04C1B69679EBA584B4B
E7F24952D7189D4AF988BE9678E27393B963B930E9759D588765349F6A5817FC
CA713AFDCFDABE9FEF9D9FA1444B5411CC726976BD2008108FD2BEB7107221A4
8F66570FF7D428ED1ED365E74275AA2F44B26DA28481F353411F9774670DEE3A
29338827F3861274F4DC1AE11DD1EA52C99C8B8FD3CA45F85F9D3472B51A20A1
404AF95B04A221533C6BD0BE3335376437141589ECF253F1BD0924AB78BDDF17
75252D6240DBF79E2D6EB4269195B89FEE74899251EF83B05A6C1EA2E6E47EB9
D1C2DBC3558FAEDE03641390540838DF57CDB61132BE80520177A1156EA382CD
8406BEC009B3D892841A533B098D45EDFCB4E7DD1C0E0D164F3C3AD7868AF745
0F875573E4A2C49A8BBB6A839A4569B3230E525C1F345C050D45142A13BD69AE
E83F66ABD4BC7ADA4DCC3D6A34EC81D76D5EC23037BE508DC0A958925CC598A5
D2AD636B64CBE3178917EF83A651E6E084107A0CFD90075151EABE73505A251A
9F9F6F0A57F1BDF8FE05F4BAC0C5E8C510C58605E0FE5D0B4B587B2AA2F542AB
BE45E015468A4B8BA66F300FEC7FD798A5B68BB02D1B373A6C47D1DC55F54933
3E8EA230D3B7C9D4BB8F738CE8E686759EAC59A8A567EF7AFB0CA5D488B020DB
0FBFDC70474F45A397E15BA61DAB3B5839C38230E6DFFB5FFF2C2FBC2287D254
802EBC92C90D1EFFA611DC8147CBD79254353F36F4E20054CD42851808B6E7C6
398E624C2437B52E0C8D91A3E30C0E21790CBEFF60640B16BAF573504CE5E68A
6B433FE0BDA33FCCCFDD68CE05CFB58D473E83E64F4E8429A66572271E562711
D4302181C6826C974B4D001F4C407C27196B29B0C12535CF9BF81ED5D98DEDDE
FE9325ABC656E39F53E122259C920E458922F3456B1DAA367F548020D1E44D22
DE573C98B0598354CE9DBFE1AE36DF146581F52D7E87E618E5E99FBC80AA5CD3
20FE6B0B8197DEFEEF9D5A420CD6821434F820E63B47031DBA44D2E6061A2165
2104FFBCD5AE92BA4267E1400A25A680F3356FF10EDFB52F46EC9E3A8A391F57
0610CDF3A64C1E081F15636AF9D903B7C7EBBE81AED4E5D836A785083278FC7F
D658F3153D2EBF8C1EC35E0FA39B8CF30231C6DFD8E9ECB1901645582A7D2707
F5F04ED68C27DD8795DB9D47F1699DA0FCD42B8D1D6FE49721477B1E17471E3F
ABCF3A8113C5F886C678EDE9433EEEFE61856AC52B212B363F9ACB2668F0117A
A9AA5D1BC2461DB7839361A2AEB56365FF6A3CB0E15984D2B044BCBC80F1893E
6362576C1C2FC4FCCD2FAF8CD0C68ADDEF0B0BA12912BA2341F0A81A5D74DC4C
37C080131D4DA2FD54B4CF7EB11374CE628D6BEA09CE9979B0D663D45B50B263
26BDEC935D63B34A92DC5389F614C0F5FF6A792B5D2B4F2D75BD27B64126F927
CBE8290717CA5730E20E929F1BE8ADA1EF4B7221A3657AA57780A128CA723F85
D583919D29BC458148EE8FFFDCB5E03A31F2EA80DF2EAA36ED89F2E6C08EFA6D
BBB2819F3B1BE4EB44A7E77E0B0CD2BC22ADFE4F30DC9273345A979FB9773F1D
44EEE7C8498CF1AED314DE74B1EBD3125C0F9F1D1094E29D5FBC4B1F210FD796
99D5D976DF2D200E0FAF7E2DA5A4BA77D2C3305F1FEAD60A211DA571C1C2480C
7DF1091C4F54E9C4AE3CC9C464B9770A2F452FE8C9DC13FB7233A407AEB18F9A
85C23B30F6BBC6A4DA134FDE8B54123207428A279ECCED5D3EFF2FF4BD7C970E
44CB6C89DA157F70CB81E2846DD9FB05526D644AA592141BE5AD64AEC2E412EE
5E6FCC7A33580AAE4F5FB1FC179049E054532897C778DBFB915F497702755868
6879FCBD880260703EABE2F4537605A534DDDB4A6EE5CA28BB9025796FA97B63
F4B43B193A4E377191364D0FF8EBB611871B3B5FDEC3BCA80E02C9262BC51F45
204FADC7E1A2C370CABC023FB6F0CE943C24524AB64B360AFC1605428B1B79DC
A8BE152ADDB3A778888B3B8504648799AD0ABBA972DE6D609086E2C2ACE77D79
E47029E40C4B5B596817F236DE342A5FD1F7EA9C827D33CC7BAC5F8730FE21A7
643561F33155EC75D01D95F1A658C03D148C0C52FCD5BA6766481372B387017E
704225556912C5BD06FEBD3E272043E87B72175BB67D0169F02935889CAA3A54
DBA6C02B1CEAE22BF309E4A9C453279987D4F9FA5C090E03DF56F92D2432EE94
D79A8E30446DCA3D623CD1612C63E32710DB20781BDE21E4F0B70DA9B4E3E4C9
F3FB3FA41144EA19149240530C52B8625B50A2FF6337B3673B0FDE3A04F9A0D0
F4BF68483C3D257544D02E0683AEB792A8E045D37C587DE0E0053C92721C1ADC
ED9FD509C3772B458F930193D7C13B884F569F5C7053FBAFA30925E83C1E8914
C7A66EC96C028BDB77F8E68801854BA4A945AA17AB68D5CB662BE0B28124F2BC
85C2E56045DF95ADEED8929F63B0F90C172DEF165724DB55E8EAC789CC08F177
99EFC66DD8580236D0ACD74368BDAA7806470A0699D0A48F6A6C2183EB49EBA4
DB29227F6E9D68B2CB2C9FF312F1EEA3FD81EAD9E0467E137DF774FDA48580F7
F0B11CF2D4C39270A75DB4462C63A0B6D795D770EC6C9C3243247A5845C846C3
691A53B1307A64333726A66D02219955A4BA1A2E7B969530BC41E98FDF0149BC
DC59354FBA9BEDE775D5CAD5DAB5B802B510A5BA6B4B71DDE40DC098B3CDFE4B
B389B89BAC5BCC782811E3F229C88E6C1DF7C527856884C3C5F17344CB8871CC
777E96E930266427264AC719F5DB245E3F656961B408EBF05438BC6A3585587D
13DF3FD8A6A91993F1B4BD122FD8236656E7B7FBA305BD8D2C6FF35AD5E4D361
A5BDED1BB9E9B6AADDD481DA478F6F0376E3B2491626CA7407E2FF56014215FA
94608FAF943F41B7B6C7F29214E8FCF175A169C28883D6E41F25EA1409D14482
150E467E367A51A1D782EC5E51A46A054E3994708970CEF4A3CEADD4EFE91D35
DF7678DAA100D741AB7552E3E595E00168BB085F6B2DAB5F37A6CB713B7E43F8
5EB860756382FEB3FEFE2564703CC45EBB55B8C00778ED7A589795CB99776F2B
290671E1ED55F8B6A8FE775002A6216C7E7FBE7E1C0683539776455952440604
F1F77C86494D4A3577D44158368ED4C9B9130B00709320CFA25B567BCBD53BEC
72B326490979B064A7C3C0A81C41924FAB1A539C6BB3408B6FB0408AE4240805
DA829340D015C0747BCAC97E13FF409FB046132DF4297497A9A961D5669DF58B
76C7622545415635E32FF316DC4A69BA92047C6B3CBF937C0669221987A70CB4
055DDFC7ECB988B7EA38B0902B7AA7C469678D898A02FCD01C0841E6D3AF64AD
F6088385A8316BD7314EBC0C090F324FA5E2D02D692A0119B5772316A2FCAF0B
C5CEFAC365816638F662A413F98353E73F5B8935EB68CE4ED02387A9E7A2B9C4
5C642F239156A4012BA6B2D994C0E22F9ADC9458547598693A940C07E200275D
FC3683C2C94DAC7201CE14810C0F647798F5D67F361A73429A8959AA2FA8E363
5ADC47BE51F911D017A326BD056FF702D7262794D1E7E6248B6ED8284CD0FAB4
17144C6D8E04034D6CB673331F2BE80A68492C4AF254BA0B055900D32282F8F1
8B2799894825F3C1727C5D7E7F33EB76FA2684744B44F5201B0D9352AF457591
82B29D8F8F03677DFA00B9C7874C114C3566FAFED90B2DEB845255567566BA40
56EC5DD4FCE859643E3838A0B1C0322CCB731A366BC7C43C8DB273E90C754726
7FFD6AD5042E0BC69E86ED7B88005F0678DC863D2D46AC31DB91A6A5D877C2B2
5CAD1B04BDE511D1F3BD0D223039D025918AB0BDCA926AF7D4C08C461346FF50
26D7A9A7D9B68F5B8C49ACD7F3A619C84151400530CA6FA97FFD03A4443FF803
3637639E26F1AC160105C3995ACD0D5A4970C229FF0F5AA3FF122F3DD7CCB0A2
565DDE48A32EFEB078DDDDB703BDAB220B82B2DDD133F24CD77631FBD557424A
B803C274753444FAEA7A34B37947644E65AFC473409A183F82EB2FA5E5B10180
B57FA1AE8A5313E6D21F67FB6D16AD326BEBAB3545F646F0E2901322D1F2C581
CF19210FD79699D5D976DF2D200E0FAF7FDB4B0252B32C4717A5BFDB83AF8959
3B18615E4FF8176C4B7BEDC38A9CB92C96236AA923B91DEEA1E9F72041377165
5C46DE2F58EF472C488F18629CA7FDB4E72EDA18959A76C35A6FFF0BE78E130B
E08DA99B91A0F7AAB7FB739C3F935B7E89F8453F45B799B8111E25E1AC57CFF0
6833B6118C983785F8DFE7F31B2CBAA487ADB13AA5AD4F5C86595DE479808381
DD595447B9E0D14D1666AC0D49F56EF0E4EBA269D46791B443AD9C54DD1AA8FC
EEA48E815FB47A57EC73E5A6BDA9F83235A845A9EB1DE500A42D124B6C13234C
8097E44D43CD21060D35F24B66D3422C574D7C037F8329639C6F159BBBE9A130
FACA73327ED6BE28336FB460063E42F3B3B3DE02B1943D0918C68FBFE943C25C
02E1BE0AD6FA78D394312EF282C3AD477225867EEEBE0C41A7F8DB7379101AC4
9658B7EBB22B80B5621745D0126759E52034DC72633B29CC183335ACF0540BA9
36F7574C39906E682B8E28F6B25297844C1A663BBF1F2ABA04C7A0DF01F728F1
A685854A512F7993C96AEEC6128A29EEBE373DDA7B54BE6D814EEA0467005163
945EA0071B63AE32465FD58E1AD9B9CC786B284FA86A1D11B5930B70AF8F828D
56129B88A52190126D198EC3F4B7C281E352405E8976C5BEC32D06C79FD8F2A2
039F729778737111033CFD859749B62FB278BB5FF7B27FDC83B8DF71CD39F610
905271985920DE1014EB8EA8845351236E3302A322A2995D6AF6EA9BD9E5F67C
AA5658DF85B06DF35C2C39F6E2B8AEF1FAB9B3C603BAECA0A0EA99AEFE2A9EFF
40EC4F36C103BE9366B3243D752071A353CA3ABF6723F69EA0AC1EE47B0817DF
1F04FF1F7D94F130E5394BBBFE6B2CC8A7607AB9B9BB8106A4DAE948549004AE
76A9CB38AD678BF1F4E9E19C3EDF0F315BD3FE126E4441E60BC477617E266DB6
856A2282E729BAA3DA01F55C27F00363FC3B68E502D1C1634FB265E238F5DD16
7EA3362D93C505682962C509FB9D3F19B715A20B4161DB56890F7612865BBD9A
128C631BB46B30E7F81D2E542A22718D4EEC9AA4EB68CECF27566041C49DEE27
1180308CAD9D30AA60F56469616AF7254CB4F3A19BCCAF449858407BBD746589
2B70588D75F7ACF19BC54EE197A6D96505DBB304B08F5A55948E1C40C936915C
B1DC8CC08D85893D35C42DE5B0DF613D9C67D2ECF30C6D9B42E6A3EAC8EB83AA
55D76A3B9255921B35BCB1F959CD0F21D4C95804432E91C7ADB51B4008C994BD
8D4CE6231FB6AA4DB98BAD48ACC94288A59433E1BF6B81F045E3D3F04B44AFC1
2EFDA830553A09A1F34CF876D6651599FDADF3C21F161FAA1E28EC28D50DCA39
877D7607C278C647B0BA3564C3C5F0E24FC89713FF0D683ECCE7CD60554EE8C1
82296197D5794AB9FAD56DC4900F9BB006D02D9F501AE93DF5E9728585FC7A80
EB4F8A998341F7A53BB71F8431A073DC1BE4AB480F3FC3E792B28A29D2455D91
1FB99BBE0EEF9F907BE8BFBB87B700F1C779E91314A95DA66F66B91164A2E2A0
FD5AB16724B59032190575957A83F94EAB8587031174CE97146F5A4B26E3E6C6
C63D373CD1ACCDAE5D64FBBC72F43198DF7989FF9FDB15EEA40EBD7E3EF15EFC
69F29E9F25EBED86B1CFEB4419533E11832582572DD50F505487900D8ABFCDBC
EE624606E5E1D3187B1C21981F9877897802F808498A2A584787139453678A28
2D58BF100A9A5818D5A1793EB1412F240990584A1980AFB36AC9A49A2FE89BA6
E9F3D86C74BDB6DE502A9F7AD811334056F9A8371DDC2696F12BFD9F1B31D653
73C65B794F087B023363E3A5C048FEC738F35095A895AB6E4F32EC696AA117FB
EC8A5C88B90008A794E9CBE589540AD1CED135257EEC7FA1B8141CFC49FF3409
E0CFB48BDD367CD03FA6C3182C0EE064E21E2D376DA968E94FA2D71F849D38D5
0182290BD895D7CE34236F4F307F69DABD5D279B763FDFBE9BF6FADC240E4F7C
0F29D16F70989D6345331FC8EA28A8F3EF0E23C5846B0C9C8DB9997645595244
0604F1F77C86494D4A35762D053FA446BBDBFB4A344F0A7750DE134C61D3B928
9C93D8803A85120D97E46E70E53864786D8FA15063FF9CD3D84314D9394CA77E
7B639148E31B5690E6ABDF8B746D4FAC75F688DEDE0DDDA5B4EC2B55EC21B9DC
4B0C3C62E30B3F0EC2683ECDF423D6EDAE4FD07D87EF573A000487DBE37CD04B
DDC9113A5277821E7C20DAA4E3FBAC0CA1E1FD36E803C1ADBC77754FE919CBEF
A5C99999450A98591732BB85B72080A2360BD5352066B16C0B7350D1C02721E5
913F1D146B2FD6D53E53363FC62683D753BBB882B2C3D335F3B0E138E55E8B08
FFA75E0E4DD995D79A480A004F27AD82A2C6A6ED2B53A6F2E4DE78EA164AAB15
807F7127FE9B82060561B8F1B6F40DB89FEC2117C3178AE85EEF9212CA9BAC9D
9DEF5AEE3C4BFC2CEC2A5A033D58E95E7194A903EF07C89BB0BC85A606637D59
8F207B66BEA904D529E005007E330D5A673A2C8DC6A9D33CAB71E26972A0A9A4
74EFCE91B2FEC245FB9657162992D850D1EE7F71630C83FD02862338521D7233
6C83DA37522A01EF5FA7EAD1994EB23AF1AABEE2EAB70BDB3A8E51CA55B73D74
675E16349EC7A6B72D81C1624D48749B7ED36C8FEE9869A5D024061813A413A9
FFE47EB8E7C1ED9E8E1C67C3029DA91CDD15834D7B9B579190F177AA1D507199
E063C8E7AA680C6FF35E4E2852C58FBFBE458C947566CE80A7D861AA9E9199E7
BD065BD7A4D16F2815B238D27975BD858B4EE58C36E01DCF6FD054260CD14DE0
B1D0DA484F02F537120E31BAE5FB3F813EF5D8A78B393BB1DFACE603993A31B3
BFA0A634426BBE1EFE790030A927CA8C3B9DC440E397B7C994754BDE2B4C95BC
FFB77BC02386D59CD0ADF9ABE8E56F29EA27EAEB8606533E497A641435556162
A09F06C0EF750E0067EF568466C9030FF639EBB5219E7D627D0AADAF52A14DB5
E7E0AAAF359527465BF16D0894F1D1E7FD1978E4A3EAC8EB83AA55D76A3B9255
921B322D515AD43DD5CA96475CC6DFC997B78F9C5789F19D496D07FD3C487D20
0BF30403E6083F4AB10350E08308124AEF1C56CD1A02B04CBD37A004DC2E0545
9F72E6D4EDE2425B3A8DBE91CAE67F03CA78B37661A9C96EAA8C5A85B6786F32
107C3130034B88184600482B832ADDB3A778888D95BC6037037E793A476F0ADE
432ABC8F6CE78B933C315BCBD971C5D5627A380A78F58A6F72F6DACC3146345F
86B498E23B5614665181116873B9AE578A26918A0DC8FB6A3794EF2E50E6E7E3
968593B908CC73E801A94E09F1F894D5740CF84CA98EA819BCA48B5EA8D4E6D5
43F2BB348753756337C1B2B31A1D6511AA5594BAFB29F04614DDA70021408274
DB0835A834140FE5A6FD958CF45C678DC91D6A1A26CF64F60AED726D4256D83C
EBE5B0063B53D46AB1192DCEF6D7E18CD2771393F5DFDF1ED421993F727ACDC9
F34D9E273FA39DBA23FDC12E56C67571DEAC7CE6F8CF2100ABF6D6FF0AB80F4D
193F711BFB32B86B0BB974A830F9EF52347CC4B63964BB8EA458FCFB9A943C94
E35BC783539E6D76FD1FC761330749C086B659B7C2738EE5D2E4636269EE02A1
E0B0BAB50FAD8559F148EEA9BF9B913097BE03F4928661D3C018B7321E63A9EC
90C5573413F671A40513F7D25384B0D6E9BC4A97780F50542A939ABB10471225
3C3C63F2C9D0DBED7EA618CE223F4CBCDD05561030258F5F31BA1D80EC74D92E
17607A347CB21F765FF70EE8B3FE8E10A40C93CB76DEE082932182F83C4BDDF1
63BAF4EB99F8F01009369D7499D846D584D0565C0100C1600593130C72963B10
D5C4B19B9AD0AD2ECBD60701CD48B9F9E243CFF098B6D25ED3C7B0D2CFFDB300
BE45AA735813C50E6232BE984EEACE0FF9108ED6CE238F31C8D2AF3E045C60D0
4D51957D8D57443EC42BF591A5F4ACE5EEFD0D302587BA00319CCBF5C77A4584
E49D3D5CA81BDA0AF460C5467819889C91FF3FD1323A50B646D5FEFDD4D72FD0
D243F6416B5B2E3DBCB45A73F62F5DB5C6505638D4F9A3DC34D11A4881A34FA3
7F2785F2242336BA4E44DA699160F8838E68CE6B78D38684C8D7DBD0E603260A
277C41B4CC3E741BCF65EBF38F51CAA601BA8E5268719CE2534E466D92488CCD
A44DB608DFF49E4E59E23EBCC56F313881605DC022FB544B6F1FC77CC6EECA79
4099F102CDFAFC44FEA152E0210EFA0727D573C2E4B6860AE0F510F5A4BB074F
4AE561BF468F25AD1BEF6F7C7F9187B69F15DDE7B3A9E1899C50AA53A58D39D2
0C3855DC34CEA604CDF997F81E7EAA38BAB09936077093D785F43807F961BACD
FBE1A0665EDBD986B1D435209BD25D6A7CE8BE5F379D4F36BB1C76735A3A5871
399525C9D6D7771718DBB01E4B3DA9A335884B0FF9C7FCE5A0FF974273D1896D
2F7D46C00224CDDCC3983756CE0D57ADA7D05D6BFEA0C061FAA09BB6C117FAD1
A6834A29E0E21F96F35E213BC9B58FB6BDE5C509818A544B95E6ED927116F8AE
FE05248E9A7D9891058668E3419C17C0C2BACDA4BF092E070A5E8A38601D62D4
246CA0155F555A1C98DC4C1399F958FACCBAF383B70B023604400F259C896B43
EC1A43A5E9E3BAC0EAB7D7FA8E2371457A43FE9C2919E4ACA227BCFF2CC95855
84DBE5949F4D5AD4F63EDA5BE364F559C5967A2DD3D65F56FC73BC247F9AC7B4
6CD38403480EAB1BDC36E90D6C56FD036AD096E64897F6A73BCE98BB5A0D0A5F
D565EC29CD1F6A46AD7CF2249787B70DEA1027AEB04832157903060551329FD4
093154F8603409E0CFB48BDB41DCA24A7BAD9B7D60C625F2D34EADB8020E4128
A8CCBD8655C23F24BDD1A5D46F333D015467179FFC8E836E49B5316CC79CAF4C
A820F76893EE0B669F0D9A1BADDD63DAB48FB7891494D6E7355102931E71D5BD
F0FC421D75B0A7D5F7369911F98A5E505DBB5B88F700935B1936B63365BEDBB2
A08B2BE9599CD3B584375975ED9FCE517205608BDB900653F9679060F29D4018
213C25E0CEEE58CFF66CA700670E4F8D8CF7D2D666AB555CC6757F49481F6862
771B134E51071EDCD9C18D2897F1FAA3989B95F7053E38065425A08B44F87892
9911AF43B7619460A904B02DE5CC7344706EC5C1CCFF1864EBEA3C82EAD9712E
D4B78D7F6DF85B58EAE5EAC7804C849C786044847C7183C9F931AFF25B7B1FC6
4D7E2099BB980091046CE30977F595F575762736EAE9E77F408FAC8E9E60DBA6
1EB191A6361BBAE8D7F14414C42F619650650C820077FB349A8B9F710D3110ED
F783A9141232B1FA3CAED393836A8BB946F18AB83DE1249825C0B75BBD236509
ECDD651F5DCAA33BECC1E9633143E826F24F25DAC824A067E9EA5407CC70F982
852F62043F6A61B940E13477BF0E07DD4D7F1B758C0D70553E45F77E9D5E733B
3FDBE07C2FCCFD5DF65F170F4E6F14364490281F767919A4C8138F980DC19A67
16C831B8ED2BFC66325BE8204AB6BA4CF14C8C0425A863C5593C31072A1D111D
C4A5344302AA12AEE5EF7E99B3C2550A1052ADFDA26B94AFB54BE464CA557FF3
8FE8739FBF6C2CF5B8941F8851CA99C06D7351366CDE1A9AA9739F9FB2A95EC9
18BE59DDF60885CC308ADE434E0C155FE370357CCF608E391FCAEEDB0079A12E
3E65F4E3AA7E1208B410E102B5E65C6147742FF996B8B1AEC130EB179546598A
2AC328534692BB0D5EAD51974AC141721E16585753AF54518A65F7CCC784D4F2
858FFCA5336221D534EB1744D1A9553BC8A2854F77255F7CBC486E9E339CACCB
BA4CFAE56FEEB0EA66C5EDA3E90FEC0288363755128C53E1A4EBB817B0F5B767
B85878D7800F70AA983605504AC7984310D99C06387E555BC269B528323821B7
45806B2FFA351D0CB0E154B3F18FFC042470F40E8C9B9870132C5E3D57EB0611
8F4048031C443F11B1D92F75BA33975A1B28B567EFD95B3C75567E9CAAEBE31F
C07D7896896CCFA95D0AEF36F65BFE150E1FA9D2070ED943B0A01D431C0D1F65
98873B193A9111E05FBFEA615CE37629812485F2D0A82B724683EDD942C69A25
CC98F113E55B483003971FF0E5689DFB837E4C94019E5167D359CF7794D3AB58
B776008FC863A55D5E2F6C422906735E707BFD9431827C044485D6EA922C06AA
26922BCCD34CAA0C9C81F63244C6268FE1DD5529A75D4FCC99164B8A0C0D0227
0EAE126CE1E650A586132497267A5067FC2167B0D8A1445FB2A6A9728956A865
39965AE589E2E5213732AE6E5C510188DA822641F43721ECCF70ECFEF33BF05C
E614BCA8939BCCB662DF64CBD5A700A5F890A83F3CD3B1EDF2A9678AE71CE48D
C8E8833904944002BC0326B4610EF4F4CB1366F8F2D2E7C0DA1F2F660653E185
8F61A48E2C918D5AA37E2ACE06950005FA879A1532C30FE0335338CFEB9FE85B
1DB0415B161B7A1F4BAFEBEE0E0BDFB74E8304EC99F8D82D4EC2FE8AFCA0B3CB
3099FDA98521D5835E93E1C02C909DA43142AA4D940EC5E26867337C300DA199
870CAD417F794A7AD18BF5A0BC0300033E2B76F4206211E4B403755D54DD9410
119A13593F5F3ABB7EFC033D8D6C6034735267B375915CB1E50E7DECD6C8450D
7196DAC62868DA3899F121243544361732BD352FFFDBA0D9BE82F8DB79B76A4F
63431854554C4B7708DDE6149AB7CEB1C5EAED68E51FA0141041FDAD315E1CE2
E5D887DC77BC6220D4DA932DEEB7369CD38924E6DABDB6EF4BA85802095D5D24
C669EDF214BCB84C08B5E57027474E32EFE7268D6B9E338FA6FCF62895DAD609
64833567E76B01A69BE6B04B426703E56443F65C2BDBEFBEEF7B8B1C8CB35788
40477286D8CD583E36B29C430589BC736078D3D912DEE56A1CCED6832C67B68B
2ED4FA2D690BB98A14CEAAF9E5A2C66B67A6C394CD644B5E623A9F1D77CB8400
A6FCC92C2241404BE81649C92391C10C1EE3ABCC7FD008D035F90C5DB353B1BD
C1F784BAE013663021420E5DC1CD40D95DCD3E681727534328C4251C25C289A0
731A77925B351BD0944F0889677031391A0410061A55349E22741C5903598DD6
F054BC340936E5F06200102F0043ECE5A96D55A6CC0B65772726B9BD471815BF
C85F04B8A3371066951C28AE9CF9726E3B60A41DB7F5510FDA76F459C24AC643
8A48886D62304BD765AD4176450C6C33737C8DE9F9C9974742D349DFA2ACBC46
A72DBE78B70938DB48AAA87CF6D1A90FE9030CDA050FF010EFF50915EAB5675A
5280A931FC030EC5A13C5831714A0CE6AF78BEA37833690ED32FD499006529A2
D290B8842B991FD6E755373DF89C955B2F0E674EDE431396A86EFFEE87B8D9A6
02E9F2BA2589AFA7C26570DA383F1AD8182A7DAAC1937FFB2256DE3725CBD928
7CCEF4A820DC9029064A00B7113BF180FF1987506AA2EC696CF613CACE266D21
8455D9DA850F039E55AEC5EBBCB63F17529B76C66171FE0413ECDE44CD302270
C63B3D660489150F2A4E1F4F454EB781033846805FE1FB2770B06CA0DCE7D769
9929FD44FD643278A5BD821F2D081825239D412FD21119A8D9288B7DD7DB5DD8
6AA251893D4A7A13876B3A948DFFC88C8B042C77D02EE5C21D854B687D5FB6A8
321EF88262FE6180CB903331F10FFF6BB0BBDA3568899838448E467156E202B7
27ED9CA9CA90AAF7784D8CACD29E9903F872278D93407A20CA9831E3C3CEAD88
0317CBD57093C50B1CD7AC8EA02AE88A31850CF8A7479AFA9D877CD325DB1C9E
A09F41173F107B225236B6089E5D27C28462D0BAD2AA00EDF3641DF7308E37C0
A45385E9CA106451AAE06A247B4540EBB8BC33E1A679ECADD7E56EC050586292
8E9A60C62C038BAFA8DFCDE0B8198B15E3002633A477CBE71F60070FBF1C2277
148DABE58FFEE16E4DFF1A72013377CB9956877F2226EB885C3E133A272A150E
42F7EE1A4B921183F069D9CFF75D432F692B85923D4EB5654B86A39A69074F9D
D1FB3B13C19E467F21EAEB8606F47F87F5F181799D71D7B212890FD9B6DF10CC
1E4B801EB2F6E3946608274DE6D3C41F4D021FBE8A1CAA2E895B7338C9DD73DD
55F2AA3D7BABBDD9CCF12C289C3871D6759F0069985AB08F704DB6447A56EA51
7FC722DC948D8A58A87F6C3BDCAFB519F4D07695D93499878EDDC922B0BD11AA
1CDCA6CC4947DE1413181D61DF7124A9F3815AA349379D9AD42B96AFA937A045
B6F7A4C3B9E0CBF3B1E332E4E558697E0C3A460F80A3D0990074F8773FFCC70C
960C0096D4D1CBFBF946574AFCB6A3CD6B220AF2C8CEC4F1B63B80100A40A4E6
A9A5F1EBD3BB90EB20EE3CD713825E268D24F39794587285015A568308E30A27
E29E2ABC7C4895949D044CE3DFCB5A4BE471D53F3EE170ED42544B08B4AE10B0
D44D2D80713A39614E43ED49B01BB97B84F7F0552D9CD5D92FFCD1933FF52759
3EF8C2A8F62E3E6418759BBFC9B2990DC43947717D2998B0C77077476B9BA7DA
1C88090E1C1E7718CA6700BDA22775328B5250C32494B617C9144EAA3532F013
EB38E8A00830C88471C8F7D02CD56B955582DB4740D2EF0D1C9B8B564AF42119
9F6538EF3BF8521726EE579D5254E74E8FFE9600A7315D86757B46CAF1E0956B
B52A738433C8E2D8741034C93E838B4A7C5405A80CF32570A54DEC4C9F9BD78D
E69E9B00E713890ABE5E1DDC84CEB2A4DFD741C1F0641E8B7FCF1E1610178D4F
51CD92E98DAEFBD8F9487EEB563E135BD6C2FBECF26DA6F23CEA028088B65CF5
0DF9C68553635C18A4797B15821E1EBEDFA675C214848AA74A4A90BA179CF206
01DD7CD49358954334165B20EBE2FBC40D8858AF70E103DF71D504E85A5B4581
B2E7D9626526367945AE53E2CE583A770E69532E0805ECD5B9007DE21642E8BC
C775817A603AEB041D8E7493AFD4F30196322D62A2800B73D87C9C3FFD79E2CD
5FA392A1F5CDB4DB4D5E3F91AC1C0BF88BDFF2852F145644A98DEBC925319F72
8E8F00F9FE091A19C73D97A24DE3AD4E56B55605E9F23674E75F882E8FC49D5D
4B121299EF63BAD238E7F9FD7C0C226DD935728BF23341988E447DF26FDEB9D8
DA21AB175E5B70BDBE0573225E4A513F8F88D2012E0F7C578487D7AD3811D54E
F7D02BCB1F6498143858D01509850ACDA005047D7AD9AD162E4B0789ACFA4516
9112616EC78A4FB67F43A3FE537870287A6275C5D6D31C1B7CD5473F063D132A
E58206081511E34ED1E65BAEFB3BE3571DA5E6CF2B1EACAFAA3722737065EFDD
24639FF4F9B2BA920DFFD0F97A436689A09AAE1E1B3180A0E0719A07515A0867
58B40C4FB85048D161CC1F1FFE97F2CAF34FE5324DDC81C769873C201D965887
2F9895B6D6E2BB95C26AAF773F633D8A931966C40E661DC622A6E7A2C24E2A66
81DC6BEABBF6E311CE6CDAE1D7F21F57405D739460737C55E3A95B8B229E4EA5
FAB1DDCFBDBC10F0171D74CCD92519D439BA7794F538E645B4525F7E7961A61B
E637A7CC4344D441E38A386C5242ADBCD84CB36B8C9F48F7CA40D5176C0A0DC0
94DE5D685F9EA871174A3C7DFA34A13C58CBEEB5C2BC92EAA1921E66EFDDC3FB
33493FEEBEBD09DED1F38268FD53194AF11C533D24E65DA4F29355BE8132BEFE
D3D2EB7B08F007A1F6F75E96E8145381C458159A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
TeXDict begin 21257352 3934475 1000 600 600 (tmpPSFile)
@start /Fa 140[33 2[36 112[{}2 66.4176 /CMMI8 rf /Fb
182[43 73[{}1 99.6264 /CMMI12 rf /Fc 139[32 33 33 1[46
1[46 4[23 1[42 1[37 3[42 17[65 79[{ T1Encoding ReEncodeFont }10
83.022 /SFRM1000 rf /Fd 138[54 38 38 38 8[27 54 49 16[73
1[70 54 2[66 2[89 1[76 2[73 18[49 49 49 2[49 48[{
 T1Encoding ReEncodeFont }18 99.6264 /SFRM1200 rf end
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-720 -576 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -720
-576 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -720 -576 a -595 -125 a
tx@Dict begin CP CP translate 1.0  1.0  scale NET  end
 -595 -125 a -568 -351
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   0.19528888 true 109.43382 6.97078 0.0 -27.17241
.5 Frame  gsave 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha  fill
 grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   0.19528888 true 318.67064 6.97078 263.95372
-27.17241 .5 Frame  gsave 0 0.4 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 -351 a
tx@Dict begin { 54.7169 -10.1006 } PutCoor PutBegin  end
 -568 -351 a -675
-316 a Fd(MK3)-568 -351 y
tx@Dict begin  PutEnd  end
 -568 -351 a -568 -351 a
tx@Dict begin { 291.3124 -10.1006 } PutCoor PutBegin  end
 -568
-351 a 1 TeXcolorgray -775 -316 a Fd(PPS)33 b(5000)p
0 TeXcolorgray -568 -351 a
tx@Dict begin  PutEnd  end
 -568 -351 a -568 -351 a
tx@Dict begin { 152.33176 18.35213 } PutCoor PutBegin  end
 -568
-351 a -16 x Fc(Op)r(erating)27 b(state)-568 -351 y
tx@Dict begin  PutEnd  end
 -568
-351 a -568 -351 a
tx@Dict begin { 142.26372 -4.41013 } PutCoor PutBegin  end
 -568 -351 a -19 x Fd(High)33 b(Thrust)-568
-351 y
tx@Dict begin  PutEnd  end
 -568 -351 a -568 -351 a
tx@Dict begin { 142.26372 -27.17241 } PutCoor PutBegin  end
 -568 -351 a -28 x Fd(High)g
Fb(I)-289 -364 y Fa(sp)-568 -351 y
tx@Dict begin  PutEnd  end
 -568 -351 a -568 -351
a
tx@Dict begin { 216.24101 -3.27222 } PutCoor PutBegin  end
 -568 -351 a Fd(300)f(V)-568 -351 y
tx@Dict begin  PutEnd  end
 -568 -351 a -568
-351 a
tx@Dict begin { 216.24101 -25.60728 } PutCoor PutBegin  end
 -568 -351 a Fd(400)g(V)-568 -351 y
tx@Dict begin  PutEnd  end
 -568 -351 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale true
0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow  EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0
  1. .setopacityalpha  Arrow  EndArrow  } def  1.13791 SLW 0  setgray
 /ArrowA { BeginArrow 1.  1.  scale true 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 
false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow  EndArrow  }
def  [ 261.76515 -10.1006 113.81097 -10.1006   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -595 -125 a
tx@Dict begin  CP CP translate 1 1.0 div 1 1.0 div scale NET  end
 -595
-125 a 0 TeXcolorgray 0 TeXcolorgray eop end

userdict /end-hook known{end-hook}if
%%Trailer
cleartomark countdictstack exch sub { end } repeat restore
%%EOF
