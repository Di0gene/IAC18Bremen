%!PS-Adobe-2.0 EPSF-1.2
%%Title: tmpPSFile
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%CreationDate: Thu Jul 21 12:58:28 2016
%%For:Simone Simone
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 3 2 322 58
%%HiResBoundingBox: 3.840047 2.628000 321.320029 57.149998
%%EndComments

%%BeginProlog
%%BeginPreview: 319 55 8 440
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000117755557700
% 00000000000000000000000000000000000000000011002277000000000000000000000000000000
% 00000000001100000000000000001100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000bb1100004488
% 00000000000000000000000000000000000000000055001133000000000000000000000000000000
% 00000000005500000000000000005500000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000055aa00000000ee
% 334422550000004455220033442222003344110044bb444144003344224400000033334455000000
% 1144442244bb4411003344110044bb44110044552200000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000888800000000bb
% 44dd1111aa00556600aa0000dd3355447700990000bb0000bb0000ee11447700447711aa22000000
% 8800114400bb0000447700990000bb0000556600aa00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000066aa00000000ff
% 11bb0000bb33aa6644881100bb0000004444bb0000bb0000bb0000bb00448800446600aa00000000
% 55aa991100bb0000004444bb0000bb0000aa66448811000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000011dd1100004499
% 00bb0000bb11993300110000bb0000777700bb2200bb0033bb0000bb004488003355551100000000
% 5500448800bb0033777700bb2200bb00339933001100000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000338811448811
% 00dd44776600227744550044dd3300668844aa550099554edd2233dd2277aa1122ccbb8811000000
% 9944555500995522668844aa55009955222277445500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000033220000
% 00bb0000000000000000000000000000000000000000000000000000000000008811001188000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 66dd4400000000000000000000000000000000000000000000000000000000006655445555000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000001100000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000001100000000
% 000088f1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffe1440000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000088f2ffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8d1100
% 008cffc09c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c
% 9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c
% 9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9cd2ff3300000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000008df7cebcbcbcbcbcbcbcbcbcbcbcbcbc
% bcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcc8f7ae00
% 00ffb778787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878dbaf00000000000000000000
% 22444444440000000000000000000000000000000000000000000000000000000000000000000000
% 00000000334400000033444400224444220022443300000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000003344
% 441100003344220000000000000000000000000000000000ffcea4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4bcff33
% 44ff8a78787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878b7f000000000000000000000
% 22889944448877000000000000000000000000000000000000005577885500000000005555885500
% 0000000033cc00000033dd77002288bb220022993300000000000000000000000000000000000000
% 000000000000000000000000000000000000005544000055446633000055446633000000000033bb
% 881100004499220000000000000000000000000000000044ffaaa4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4ff66
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 008888000000dd33000000000022000000000000000000000044440000cc1100000033aa0000ee00
% 0000000000bb000000008877000044dd000000440000000000000000000000000000000000000000
% 00000000000000000000000000000000000011aa440022880000aa0022880000aa00000000000066
% 990000004422000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 008888000000dd33000000000055774400000000000000000055880000bb4400000000330022cc00
% 0000000000bb0022443333cc000066cc330022330000000000000000000000000000000000000000
% 00000000000000000000000000000000000066884400778800008844778800008844000000000011
% dd1100005500000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 0088880011778800000000000000004477660000000000000000000011dd00000000000044aa2200
% 0000000000bb0033aa3300dd22004477880055000000000000000000000000000000000000000000
% 00000000000000000000000000000000004411884400888800008844888800008844000000000000
% 996600115500000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00889944441100000000000000000000002288660000000000000000883300000000000000339900
% 0000000000bb11660000008877222222cc0066000000000000000000000000000000000000000000
% 00000000000000000000000000000000114400884400888800008844888800008844000000000000
% 33bb00550000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 0088880000000000000000000000000000228877000000000000006633000000000011220000bb44
% 0000000000bb77bb00000033cc440000cc4433000000000000000000000000000000000000000000
% 00000000000000000000000000000000774444997722888800008844888800008844000000000000
% 00dd22770000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 0088880000000000000000000000003388660000000000000000553300223300110088880000cc33
% 0000000000bb005588000000dd66000088aa00000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000088440033880000bb1133880000bb11000000000000
% 0077aa330000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 22aacc3300000000000000000044884400000000000000000044ddbbbbdd0000ee22115522559900
% 0000000044dd4422ff88000099330000338800000000000000000000000000000000000000000000
% 00000000000000000000000000000000000033bb8822008822337700008822337700000000000000
% 0022cc000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000330000000000000000000000000000000000000000000044220000
% 00000000000000000000000022000000001100000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000033220000000033220000000000000000
% 000011000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff78787878787878787878789c787878788a9c9c9c9c9c9c788a9c9c9c8a78787878787893a59c
% 78787878789c9c9c8a8a9c9c9c9c9c9c787878787878787878787878787878787878787878787878
% 78787878939c78787878939c9c788a9c9c8a788a9c937878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ff8e7878787899a4a48e78787878a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff787878787878787878788aed787878788ac9d29c9c9ce4788ac0c99c9cc0a5787881c08a788a
% c9817878789cc9c98a8ac9d29c9c9ce478c0c09cb7e49ca5c078787878787878a59c787878787878
% c9c0c0ae93e47878787893edb7788ac0db8a788ac9937878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ff8e4d4278784d4da48e4d4278784d57
% a44d4d785721786d4da4a4a4a4a4a4a4a46d78a4a46d786283a46d786283a4a46d786283a4db88
% 44ff78787878787878787878aedb9378787878c0c07878788a9378c0c0787881f67878d29c787878
% 8adb78787878c0c07878c0c07878788a93a578789cdb7878b778787878787881d29c787878787878
% ae9c8a7878db7878787878c0b778789ced7878789c787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ffa4784da4a4a42183a44d4da4a4a416
% 836da4a4782ca4a457a4a4a4a4a4a4a4993778a48e4da4a4378e4da4a437a48e4da4a437a4db88
% 44ff78787878787878787878a5aec078787878c0c0787893788a78c0c0787881f6788aed78787878
% 78e493787878c0c07878c0c0787893788a8a78789cdb78788a787878787878aec09c787878787878
% 9c78787878db788a9c937893e47878aee493788a93787878787878789cff00000000aa9933000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000aa99550000000044ffa4784da4a4a4168ea44d4da4a4a416
% 838ea4a4782ca4a48ea4a4a4a4a4a4a4624d78a4574da4a44d404da4a44d78574da4a44d78db88
% 44ff787878787878787878938a81f678787878c0dbc0d29c787878c0c99c9cb79c789cdb78787878
% 78dbae787878c0c07878c0dbc0d29c78787878789cdb78787878787878789c81c09c787878787878
% c09caeae78db7893d2937878ed8a789cb7c078a578787878787878789cff00000000dffffff6dfc4
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbd6ffffdd88330044ffa4784da4783778a4a44d4da499574d
% a4a4a4a4782ca4a4a4a4a4a4a4a4a478994d78a44d4da4a44d384da4a44d784d4da4a44d78db88
% 44ff787878787878787878b79c9ce4a5787878c0c078939c787878c0c0788ad28a789cdb78787878
% 78dba5787878c0c07878c0c078939c78787878789cdb78787878787878819c78c09c787878787878
% 817878db81db81ae78787878c0b78a8a8ae478ae78787878787878789cff00000000d6ffffdfb890
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 88888888888888888888888888888888cdffffcc77220044ffa4784da4a4992c8ea44d42787899a4
% a4a4a4a4782ca4a4a4a4a4a4a4a49978a44d78a44d4da4a44d384da4a44d784d4da4a44d78db88
% 44ff787878787878787878b79c9cc0c9787878c0c0787881789c78c0c07878c0c0788af678787878
% 78ed8a787878c0c07878c0c0787881789c7878789cdb78787878787878b79c9cc9b78a7878787893
% a57878db9cdbb7db7878787893e49c7878e49c9378787878787878789cff00000000997722000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000009988220000000044ffa4784da4a4a44d4da44d4da4a4a4a4
% a4a4a4a4782ca4a4a4a4a4a4a4a457787842578e4d4da4a44d384da4a44d784d4da4a44d78db88
% 44ff7878787878787878a58a787881f6817878c0c078787881ae78c0c07878c0db7881c0ae787878
% 9cc078aed278c0c07878c0c078787881ae7878789cdb78787878787878787878c09c7878817878ae
% a57878e481db78a5c078787878edae7878c0d27878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ffa4784da4a4a44257a44d4da4a4a4a4
% a4a4a4a4782ca4a4a4a4a4a4a4a4a4a4a44d78a4834da4a42c7a4da4a42c99834da4a42c99db88
% 44ff78787878787878a5e4a578789cedc08a8ad2d29c9cb7e49c8ad2db93788ae48aa578c0a578a5
% c078788ab781c98a788ad2d29c9cb7e49c787893c0eda5817878787878787893dbc08a78f68a7881
% b781b7ae9ced9c8affc0787878c993787893c07878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ff8e4237786d4d4da48e372183a4a4a4
% a4a4a4834d166d99a4a4a4a4a4a4a4a4832c4d8ea44d8e8357a44d8e8357a4a44d8e8357a4db88
% 44ff787878787878787878787878787878787878787878787878787878787878819c787878819c8a
% 78787878819c78787878787878787878787878787878787878787878787878787878787878787878
% 789c8a787878787878787878788a78787878817878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4838ea4a4a4838ea4a4a4a4838ea4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 22444444440000000000000000000000000000000000000000000000000000000000000000000000
% 00000033440000003344440022444422002244330000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000044000000000000000000
% 000000000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 22889944448877000000000000000000000000000000000000557788550000000000554488550000
% 00000033cc00000033dd77002288bb22002299330000000000000000000000000000000000000000
% 000000000000000000000000000000000099888866000000000000000022dd000000000000000000
% 000000000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 008888000000dd330000000000000000000000220000000044440000dd1100000033aa0000ee0000
% 00000000bb000000008877000044dd00000044000000000000000000000000000000000000000000
% 000000000000000000000000000000000066442200000000000000000066bb330000000000000000
% 000000000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 008888000000dd330000000000000000004477660000000055880000bb4400000000330022dd0000
% 00000000bb0022443333cc000066cc33002233000000000000000000000000000000000000000000
% 00000000000000000000000000000000004400000000000000000000005566880000000000000000
% 000000000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 44ff7878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 787878787878787878787878787878787878787878787878787878789cff00000000000000000000
% 00888800117788000000000000000044884400000000000000000011dd1100000000004488330000
% 00000000bb0033aa3300dd2200447788005500000000000000000000000000000000000000000000
% 00000000000000000000000000000000008844666600000000000000332211ee0000000000000000
% 000000000000000000000000000000000000000000000044ffa4a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4db88
% 33ff8a78787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878b7e100000000000000000000
% 00889944441100000000000000668844000000000000000000000088330000000000000033990000
% 00000000bb11660000008877222222cc006600000000000000000000000000000000000000000000
% 0000000000000000000000000000000000110000bb11000000000000774444cc5500000000000000
% 000000000000000000000000000000000000000000000044ffb0a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4ff66
% 00f1c078787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878787878787878787878787878
% 78787878787878787878787878787878787878787878787878787878e4af00000000000000000000
% 00888800000000000000000000668822000000000000000000005533000000000011220000bb4400
% 00000000bb77bb00000033cc440000cc443300000000000000000000000000000000000000000000
% 0000000000000000000000000000000033550000bb44000000000000774444889900000000000000
% 000000000000000000000000000000000000000000000000f3d5a4a4a4a4a4a4a4a4a4a4a4a4a4a4
% a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4c2ff33
% 0077ffc9a59c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c
% 9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c
% 9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9caedbf12200000000000000000000
% 00888800000000000000000000000066774400000000000000553300223300110088880000cc4400
% 00000000bb005588000000dd66000088aa0000000000000000000000000000000000000000000000
% 0000000000000000000000000000000066550000cc1100000000005522000011ee11000000000000
% 00000000000000000000000000000000000000000000000077ffdbc2bcbcbcbcbcbcbcbcbcbcbcbc
% bcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcd5ff8d00
% 000055d2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffaf330000000000000000000000
% 22aacc33000000000000000000000000004488550000000033ddbbbbdd0000ee2211552255990000
% 00000044dd4422ff8800009933000033880000000000000000000000000000000000000000000000
% 000000000000000000000000000000001177117766000000000055cc55000044dd88220000000000
% 0000000000000000000000000000000000000000000000000055d7ffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe4770000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000220000000000000000000000000000004433000000
% 00000000000000000000002200000000110000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000044220000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000
%%EndImage
%%EndPreview
save countdictstack mark newpath /showpage {} def /setpagedevice /pop load def
%%EndProlog
%%Page 1 1
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /Library/TeX/texbin/dvips -Pdownload35 -T
%+ 11.400000002980232cm,2.1100000029802324cm tmpPSFile -o
%+ /var/folders/yw/m51wd2y92_x5n48pgnksg2nc0000gn/T/latexdraw/latexdrawTmp146909870782212304/tmpPSFile.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.07.21:1258
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%Version: 003.002
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
dup 51 /three put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BFCF3BD739E32E7FE909AEE068D50FAC33605FFF98C7D0115FB860178FD03DB9
7985B78E0AC21F2EA065FA841F5928FB85163B2E2D8F850DC7EE313912C45C28
2783F6762C67882EFEDDC7E7567F91C16B16FD8D5A1ABF35B5586307701B91AD
54984598F2AD46FEE3D68A2731BEAA754C8E730FE0E84952EF77930E4118F8D7
2F3AD7546FB0C2C0EB3C172C6715B1406A9A968CC3E7C4288FEADEB033D46FFB
6D567AEF67B192A18C43F88CBD8661105BFA790D6CFF856B7F13CB803E2B1D89
615A871392987AF57E5C5B90EF3C26DF47CFFE8481CD3FDF95954AE4FBD69578
2EE115358F3B94B274343D2120DF2FA5E83FF821F176328CE3A1ACAA56B64EED
C9F798F93FA4955707670C391B2285C1A528DF1E62476DD80AF0C9263BE70A87
FAC8928C0C2734329E8AE529377F94ABD8DCCE191E530464A125A334CA9309C2
9422A1A7F60D8BDA88610E18B5297B75E73D446B759A633C1D22B8EF592FB4D3
270DD50F80F3CEA9521235A3A533018952A57C7D55BE07FB1445F2DC0738E25D
4D6CF45B63A73F6DDE047D6B0A5AE73D06DCDDFA0F7BF6D38F5155593CAA8485
FA6E97C2C4521451B62D4B029F80E35E1843BB49FFADFA83E1AEBFFFEC8E5B92
4A2A9273A7B57ED20AFC70E4AFD4C4289C6533041749DA650D1A305EE5B0C26A
715F5074959D845DC3F55AEB7F57E41B9558D94E3FB9963F3B34A32BD87DF227
7F3A24432EFE5776525A508DFDB01A9911177F024FAF366C2050C77A194EBD19
F798B38064CFBBCED01EE0CEFBB683AA46CE52B69E96530E8A0A166F554913CE
B2CE4320FE1CAB2199247F69B251DEA7BBFFCBCCEF45E1419576A2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%Version: 003.002
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 60 /less put
dup 62 /greater put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C1427084643B66BB9181094E29D
5FBE37708E1D8A6B7518A96876844CB66954227A7A6AF28DD075A462526DD5D6
40EECC56FA366106E55C7068997B54B7F0D03AC1AD45D28C67C7ECA99DBEDB1C
E18A79C353113E2E05B837E703278B202112B1C69E42A69D64B62F0E7D8F7E5B
C1F93F0F99EC20EF312046F4B0CD7DAB31E422070B629A7FAF3BC331F0A7186D
4053C7A7BB3253326E1E84A4EA2D9659CAA229C3AC407FB24F4ABE9482030869
A9668917642B1ACA4C6EC2153BA085CB745676F8783325BC6F017E28C8C2085A
26E6C61199CC03DA8E100A0E0E26CC256310A0E1BCB6B0FD1EB01BDC8E5035D2
94A4351DC0867B4BAB0208DB3C8B712354804CADB0F70BD9C8B3544733F97167
41B1B66B512C1290E6D6A79DE9ED4E8F44339CAF9B7E1F8C6839954F077F234A
65B832BBAFB59E4A8EF37ED43D387BC98A93F940531F3EBD005D9B4F745AC182
A2E12B21F30E771B9EF9ACB2D669D062302F200D8F6A269544DE0EDDA5D745BE
63445CCFFA78EE5647577A0ED19C0B629D9175E737A7598B9AFBFD3C6A3554AC
FBA256AA5B50E52DE919A353184DBF6EBBF3A0AE508638342E0F2BB1F3D88BC8
848E84BB55C5C4C6D026F8E0BCC38F95145B38106811DC6EFD6528C95B38F06F
97E8F3B15D4AE350894D705ECDBED3AD63F1C20DE216BC0756BBF4B6B69E4165
DC45495346A27EDEAA502D459F517BDE4BF61EA8959607F82AD0A10CADDCC9E1
FF5B7E24572114B4346F38B9F781E8AEC4CBB2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%!FontType1-1.0: SFRM1000 0.3
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1000, tcrm1000, larm1000, lbrm1000, lcrm1000, rxrm1000.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1000 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-189 -321 1456 937}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F267FE330B57DF626EBF73D2779A4A6B462AE6E5
19E5878939A488F2FE1094A76925CD24DAD4573AD3CF34E426708CF06E7EBFFC
BEF5595408106E2189F418D17AD510ED5B6A528E8902AA3A5F0FF52AE3DEAB07
32F06B63E28BB88229E046F4FF8A356BBDDE82DF2A197F2E26CA00D5594725A1
83A89A36487EAAE1AC312C929CDCE50722FA6C596C261E4D78D6C6ABF77F5CCE
0E410ED74287A0F201140F8D9674A7AC585D3CBC72CCB824F9E1CEBD08AEDB3A
A4015CADF471F7ABD9B0F0AF73A8274FD441BC1988A61799856E4770155341D6
516CD0E25BFA59B67AB7E0571DF3F5BA70AB52137D9E6A79EFADBE70CA05AC8D
991D0895C8FFC747FBC0E9A7212BAE6560B9E2B64FFCC58112E64A3B4CF7ECF7
595F51C34AD1342F5678FE1E62EC5A389CF04E82B5F832914B91F921F30A7E32
CA3919F57A2D9DE844CAAAC0DC751C255C9916595E8C9532E7A0A84A0AEFCACD
83EDE059FD06EEE9951473180B517F25F609F347DBA012AE9F004DC3C771777B
BE812787C3C50315D67254A384EB65F260943C6E16B2CDC64E15EEEDC67C5544
8ADE9981A6867405E46222CACCEF79F9DC8674268BBBE1EFEC2187A75FB7FBF8
CB2DB2134848DEA2F9CED443DCF561E7272B38F830871B2A5196A787924EF556
4B7E9093ADD414ACBC10147944D216D3500504F9319F7391AF590198C5957215
07BFEC58E9A051E63B72289930A205B25C2EA38006E7ED0F150D6D1334559D7C
C519A9E7B5C209964A288AA216E5A6C24FFFC18696CBBE6677BEE12BD1270FB9
18B8C3E5E3DF6D0AB7F2FD074AA2047253A370E53B97966F88049499CAFA7418
B829050C831B660CA2E48B37F8B894F009F11B726EFA5AF583FC660BEF67EB8D
505D573E6BD1DA4FE45BA457637E1963BB97C92A21945BCCD36E11A672505296
CABC741A68097B60E1B564EAB0E48C62DE0885B8D074A7642D59CDFC00855189
89D3F25AAAB3B0B477418D70839681B34C5C5B3A15A50B543CA6DEC90D9763DE
314112E205F0733AF96AFB93206C9011D552ABAC54FE402799E8446FB0BB1D32
B7A9555EEF08BC5570B4600A47BE5FD984C7922FD97A6EEFEE6586A55191EFD6
3D205E400235F3CD2DC3825A961298A9522DCE06F0EC9B516770F580E38A02EB
C9DEC8C0BED602BF78B75EBA8AE6BBB6DE555302C613F965E02A12E5A840797A
1562D704283C9F0A171E499CD16DE59FAE4BECC6E0369FBB3907085AB15E8882
990CD72B3D0D16E9D6F78F0F5CCC98C6B3DFD3FB01AB1F6655C7CF35E9469965
86C79196F03715FC56EA60D059D62F6879A6A8D7706D26251A2B807BFE3F0882
B3F9E68748A4628EC396F57C73AFBD42B9952FB62006DECA4E41C4B31EF4E792
6ACA9DC3AFB9C0229B52E9EA6718CCC099B72B68B37C97E610E57ADD3AD3DDBE
C1AB6374E1E10A9648D15DAA283374CAF932D46D885D4654240295DDFD89488D
78F6F6E9FAD73A5F027EDDED348181B8A842FF8B0BA42807334E91D32F847913
7CCAEAD5A4211E2D9A970F96048F0406983E4AFB8FE87CB5FD73FA64EA5B5536
4905612CBC86CA8D7264D79F9F67E8165513E40A45367F7E7A190693A17E90B4
FE4102D3FB47BAFBF920A96507C98E750A7B3B97EFC948AB934461A50FEECB91
C83BAEC39919B5F966C2ED72912F5CCB6ADFF9AEA63A9A4DBB27B0E6E6B7159D
038415262A3286810DC210E042B26C218BCB42366A781D86A0C6607D03A3626D
6331B0DF92C5C166ADC355BCA530CF6C7A33BCABA8689139753B311CB91B69CD
4A10C37D5EABF66B268FA4DC35147244290871E8BBCAE2F14C05DBE11222801A
05B686BC98772CD7C7A9291CD0D3A0BB041ACB65B9E6E655AFE2AF0E7C8A77E2
5389113E7B1D6467EEB4C97EBD8B02EBBCB8F040C43259B5641B675220B47AB7
7FFF546B2218A35BCD867A108D8FD0CCC6367A52BDF1D97E1513B4516757CA8A
B45450A074B1ACB91AA1832811471AF79E694CAA2DC543CE420B1A1C0BD80AAC
1E57C22DA4E77553F9C31539952DB0C2F3F8DE2AC0C6AAF67D767E15D4202AF4
2CD3D3F98DE8CE8101F24BA8714CE86244FD4F8DBDBE9758D8FB9B153758169D
F4A890178DE0E5509ADEFC98D8B3FB555CB10B2B4D6FBCC56FAB1293E855AAEF
3639CCE1810D5C249C18208CE360D40960BF25DE45E97A7B74E287B7467200FC
731E143ACCD729E9479671F9FB9AEA74E20F4A3AF9AB9E2544D9B4B46EFDC6E6
EAA480F411AE8FC823F3F6CE624954400454E6F42BA9B0F3518C6D33958BDA20
700DB0800D9F25C7448970684BC555C8390E34A2E9A9E381B10D1A048E7EA4DE
356AEE07D79FCD728B291A0288689D9A1CCE52D73B293103897076A6AA9E0F47
5C9BE97F17E68242BE9D69173F9D118179748A77C5160932D9BEB212690C53E8
DD69A2EAE2DDD0184B51DAAF285DF6B5CD27B1281FD397FFEDAF9FEEA5B58200
9507CA1C4CAE05EC2FCE3A8ED9C99307E7D2EDDDC5D076DB09B6A1E2BE35B8A1
8D4135AFF9183CC8FA118FF332A36A296F42C6326203FA84A3CB2237B50517E2
8C85B86E8CADE4745599F8041F4CC83A330497355A45288E2B3F57C07F43AEFF
CFBE7A85DAE721F9B0D3EE785210CB5DD5AC1C4AA65C483BDE5670997B72CBA3
AC1C1F7F60A8BFB26A56361DEA174B3970F587FDFD23655357A86D069DF62175
76D98714DDEA83C12AADD1B6B6C6D64629BDED74F0084140DC73E0727BC50EC0
DB9F2D8DA6912E989C1EF9ABC3F1B65428854C951C7470092EDF41007748197F
DC6B983925770274B0A545833BD6986DDF098E4FD8FB41685ED11480F436D632
A3088725A701619C534A8F3333C88CE6F570493C73EC6EC05EA00FCDD2BAD14E
541FDA266C2AD0C3B36FB082DB96196652FBBD2AD977108E99FC959B5DF5A826
9430E40CFE183FCEE44277F23B0D68A83505F653366EAA4C14832705F37B7255
7A6FB3DD2E7EA3F002802820530D2E7F76255229B0C551016F9AC6F5F8B0275F
D32BD381FDAAA1DA0C332A9DDCD0E175E01B99D56899A3494BD1CA5C0B63FAF1
0515F9CC7BFA5C908A09574FB30FF33CF121295E796C9ABAB35BB2166E3687AF
3DF0FB21AAE64B3BC84C902C0F93BB636744888B6424BE19A79D2898CBF51612
1A69CE1DBB930C69B0F2347AA6E810486EB9A53234E97B01FC96053B0C71F73B
F189898C796A1032AD7C90F0613EDEB93DE8DCF095D3FC3082F8CE1BA6B916B8
84A132560F9C2E4BB6CD58B85E9355B1CA091FB7CCE14C6075EB6C89EC0FDA0A
DC91D3BC6BBF0D19647DCBB5E693586E16221DA38E1A4B7AC957EF4565DDFA91
36A016CF0C4C3EE45A5172EBB278239FB4D7FE2935E62D3C1D11106954C59C55
2748F4BF13E2B8064A057AEAA5EFEA931D89AAE980962317F67091A4D6209472
C5987811DFF2F57C704C472D566C12B1D92695AFDB240DC22B6DC316F8CC14BB
93939B5B9E26AC8899CD0DD97356BB4BF87D4ABB7E00AA5702779FF2E9CB1B22
9CDAF73F36157B3A163FFBE3370F7F3267DBEF16D8E80AB9075BC36D1F6C1E88
F0ABCD64C38473DF19B57A5608992A57F5B570C4FB37F1E938735A7367DAE1B6
853B3C02D487C5E6404815ECBAF1C49F2B4F20BF1046EC41C4D5B5325C879B53
7E40FEFC84E5FECE76A8B51894935637F6D5E464B660FEEF6BBF242DC8DF186C
4ED33D753CDF04A78CD18F96BFA7050D047D0019EC21BAC2DDA512714A6757AF
40686EC196567DA0604F5F31B45AB4B5D0A179C0582A7F28CDC56C545ACF5102
874C446CAD65DDE0C85123ABF35E3D2F65D6CC5A5031E331E892BE0131EF7C62
87E8933A4FA58300298B11C7DA727C7DA9A8D81CB047B3AE8446D1FFB0991257
0BC0441E063459A95A384051BE89CBCE5CA0331F5632F4B2BE684B749A1E0AB5
6C0DF8CEB3598DBCD8E17363864CC8AEFEF3BE09E104E14EE9649FD4FC798ADE
194715794B7A1BEA96746DF927B1B78AE0ADDBAE32DDDC91B3CFE7C6E4A5183A
D804298156DD45DDF06B651C7DC3CAD527A8BD3A6DC4D29579B6B21F87917010
50A1DB98BB6A96D8B52302D9B7E47FD932AE04BA89F6789A7B5889ADA2D8866B
8CC7AB76EE17AF6E15DE8F2132C49C352027D93395AE33052794A9A7F1A49609
9F1F58E44F4754A197E30A7E5EB950D13A9A9B70A14C98A4353D44DC65E571CA
F6CD0F5B24F400933CEF3322C4F892D7625377A1F43D482CDF7EF329488663E9
4AA30411DB14F5613DDA0C4227191810D79BADFCCB04D28D8BFD350651B8DFD3
D87038C6247A14AD0EC93784B7C00F56777DAE0D7E0BD6C5B6CC2CF2FE7F16A9
B49B13F432DA67D18E425B8FF5A0735195C0EFD93E3CD3B6A32946769932A190
4106A1748FBAFD245BBA3DF29C68F323E4BEB5F77A236307CE5EAE8A0B698717
87CD959EBD07D4770BBECF012E4F5BE88FDA3521DA385BB61C805F2DDF3E2218
06D7B4826A3ADED8508BE3A831AC0868B467BF7DF14590FCDC56BB5B407A91B8
F6CEF4D0161D25F4116AD327481FFE21B11B3054F3C9BFC9D62338B3B328FF3D
CDB8299A2C0FC15DAB7ABFA8A8D227D42050A292E989037E08E944AE611BF4E0
02ADD3EC484AE662E06B4AB96ACB0FCD92FD5D20CE56AB946AF7132B606957A7
B565115A8BC2C71AED17F3C26F5D048F1B813F43FA03987F7CCD03D310B1535A
2F539B4268F981C1827F7C5F36F10248E95FB98512F623FCEC960B719C2782BF
AC1EEC94547193B9DDBF29812BC67B634AD60668594C5B565555CD66C43738F8
4201CBB0F4A133A9C0661DFB09370239122D03587930F9B57573FFC54DC3D4AB
7C4103593003F965305B168ED629EDBDD2C8142EA8F0B8522CE62B82FCF88BD9
A5D4E544B79A91DB54474AB118665FDF9E387345C9FC48BCA0678D98BDDD401A
88775433BFF517E622E5E200BDC0C8F32CAF4ECA0423E5B040CBD5E7F31B2CBA
A487ADB13AA5AD4F5C84F9075341582702DCE4EFEF3A673DDC442A0BE94A8D4C
16FFFEEB22E19FE2512E9B8F80050E4C2E794365DACDEA1F9EE36A63E6F884A5
6C619306C9DB8EED4E05E21ABCA13F9FE843546003A2E67AB3AC7EB56BE27A9C
F6D25C105ED983DBB22B6FFA59AF34878EDCEE5F1403E30D2BEC787DA055A16C
32AA34DDC332A6C76D0E0C3ECBB30F4304FE670EEBA779CF0B02AE18784F23A6
23FC9934CA40F97D4CEE69EDAADC9C7C58A544FDF0D1DCFF0F548353AEDF237C
78CACBB5CA0E20A9BCAC252E0F4AFA0E1BE834F7BB1DF5A778F68945C7C690C9
66DA9DB1DDD53376683298B970AFCCCFA9B30FAE7F4A9529CEF4CAC3267AE9E9
9F65A25977EB3D8813425FA7F81F9407287810BBB9DF2DC211C92D2C003D40FD
E685502EED6D3D574A2BA72A09E7E7378454206904409E9FF99BC9BBC1556E8D
473A35FE9BC055D128AF38AD3680A3C256B436D832DAFDF398663B091C35D612
38BB2B732A1B2FC4B1F942D87F7048642ED90D3289CE88598FAE9D20329CBC5A
CF9F2127AA88204206E75D9A5C01D1DB7849EB509EDD54DC1B82A447043CE44E
65F0C799DBC6BB8778E2EF974F873CCD5C71AEC0DE56CC98D1A219CA36ED1F9A
E7F2F8CFA2EAE67BF5C1882C52C2DC01EEBBAD4BBA5861AE4E48E9DD4F9CBA6D
04CCFF117FF5E67E6E302BF51AA6AB3D4BA2A61839FCC9E10BE0FE1E618E4BFB
44561128E0AB55B744867CA8B1A71F63EA804BC63FB0EB6EF54A87013494C30A
922F7D0080FC2A395F33B94CA2CF3BE42D85645C5D725C1EC2AAB13F8A2DC709
C6544CA74327452822CBE548FEE5FB5257BCC840416783BA0562AB6D2AC5A930
BEB817644060772BA2A21D43EBD5A856D8BB744D1A2E50FE03BF04DECC857C41
244923CCA2E1381DE84FE25767C311C5BC6FF8AA1E10482BF3A42D36F3CF6DB7
9352552913BDBC1A3E21DE66D0B05A9F13D91798CD1C3101CFB8F6AF64DD7894
AB604FB4341907ACBFB8A1E67B975830B9E88A435DF161EF9A517C3A4439C83E
107F0611BBF4E287A01273C71907C59CFEE3C5642BD6DC838D2ADF539137A9BC
D6607E25DC313494F9674D6A259A56E4DADC1E5ABE8CB479F1F75785805184F6
5A634041BD8CCC4FBC2D03DE2C6B2D298ED89ABE2B26CE562FC84AA5E246DFDC
900ABC2FAEB0B8D1C2699E56D4E976B79A51E1276AE7E1D39D168818B5607ECF
48B39681BE1EE03C0D11AFF3AB46327AFD49DBC0317AFFD85FA1A1CF898804A2
187EFBA3B8A3994B694EE2281BDBB8D46D395682C415E0C61731D7156C5ED849
C92761955190A89766ABED85A3BC3BA69851CA7D5E16480AFFB4A7993E5C74A6
4CC77EBDEF2B15FF13A4C29FD895A6B5D5A01810038E3C422AD6A6011E641B73
BD918AB90FD568DE28F394F6FDCB6E34435AC61CF2339E0ECBBAA02E25442FC4
DB96C15B184D10C03030BE87C9F1E5CE110CEE6B46717AC6A6D0E455FB0E33D5
7BA5F3730400301D1BA6D956CBC6C5A5418D2B1578898052C21023151494DFF0
DCB32726CAA04C99BF38A31B90D641ABC065F1ADE9DC4C9888AD0D4D5387F05F
00CD4163AD65481CE38557F64D085E0B917121910B323E0DF559F1BD86E7BC50
AB82D47677C28C69BBE333A7D19B7AE622D78A168DD57786281466A7C86EB2DF
2C80DCD9066B7C40E884AAA0F61F3B75BB036ADB5FBD9FEFC0F4782E29288AB0
A3A6D62E40041051B6FA6448B378A98BA5F415D60D7BD4EB204574CE4553A895
37F385CCDD0378AFA69E24DECF644DF92D8B8F5891A9347D516A08D004B56779
3B3917C4EF9839D79BB70855669D98B31DD25B1C9752BA469BF86FDBC9BC4015
422C6DA9D1EB5494174C3FDCACE78B900C12D742D1BCEB27493756644E79D321
0E34B853353B32E939577C47DA237B6439575C23953D5B8A1120F7B4F6433D51
5D585A3F9321558D70B557879E3C2C23378E7B9776EAEF8C6493DB31CD5E413C
6B889393D35EC332CCEA3A2704269C835C4763A6985CB387387BDD3C1962A598
79DCFE20A390D69B41EA2B5F23722E56DDF909807E51CDA9CC6338E19D26A743
8C879F0E77C5F82DFDD90063425D1BCC36C3C3B945C65C7B77C7BB8D1DDD8127
6D70FE57D27D4ED8CFF931E013208B63AF2A886C50A41A9D19821CC1047193BD
7A2C0C6F0E465E97444065AC974779796CFFF55D0B200FBB23DC1C93A5009DA5
115C8C5DF991FBA87C02235C70B4BD7F4C72F0A343B79912A08712DA78196745
DB5120B5BE0C978987E4D0BC8AEB38935B3145043EBD3CCF928A3BF757979D98
5B3EDB1390B9229E5CDFC926F6CA83A98C863702E1412C2BC6BC681ECC995611
CDF3631E7EFAB41BD233860C52046DBFF52496501133D39C10590C070EC35F5D
B0DBB928E45ACA61F6B0E2446524BE12D9D65A25842E65EE2E7BB01514BD9DA8
3521EB64AB7F460D93511A37CD0C8A8B3F6DC8AE75FE8ED2D7879C8C8004101C
CE7293B99E415473B4BEB3114F7C6C1C8CA76D871ABBE0BFAF8D99EE339BD0A1
1514B375FED3B28CB3280307FBB02118A055DB5D7D1B2624A13FF4989B5C5C56
000A41BDDF8B601D88EF5573B5DB16572FAA7C415017E560CDF608429DC385DC
C9929E1BB1D4C07F04B9EC56B26E064A0D6630023BEA9A20704CE4C6AE71D5C2
D8E9983CE00941BF17D6D18ABA2A6FF34564E210312D6BBBFAAEFDB2BA225C7E
BB46BC5E76EAE93E456ADFD767722AACA64E30DB40C4929D701409858774BB8E
A01F035C399EDED6AF7A70BF2193E94681A944FF1D030767ADFEE9ED0304F38B
FA0E3046EC508DCFC53C4577F5D688387BE87FB07BE7B67BC9C461BB0E2F6D91
7140DEE43FF956B998615FF8E547CFEDDD36E648D667AE444FA37853DE6965BA
42DB0335D43A66E24FB68BBBF08D5E8B5C9AA1C3ED99501EADF417CE00DDE8DD
468DA18F23CE3BF9D3A84A8A4BA542E760F0D0CCF671472E9645A501287A1230
186C1DEE5D7219D90DCA47FCBBAE51192E4A5DBD396F2E9F32C73C004C5FD566
D91C7A71C06148C4FC1983A41D087FD6F913F1D816A28D7BD88C4168107221A0
7ECEA56F82191756BB8EA9F89654DCDAC73A588B6A10EF33F894F6B2C7D5F82C
1968490A098EBDBDB30BCB77D5124C8A46D164856F02CB3F258D2B99BAFAF318
5046A500CC449946BEBE440B9B44859111AFD0E2C07F20C92F99CB8EADEC0DA8
EB06A33161A33D521D72B741A76FF8EEB02D1E24AE3ECE541D1B10BE8F262043
BEF58041477E2ECDDE5E9090B4FB7C6FB85C67F3D25B5ABF17A2BE196E5E1366
EDBD5E6438205A75E8BBC3FF6B3D567ED38212B3302C8F11D2F2204DFCBB338B
7697978550FCADC17D7E5A070EF9E433C66D5C4F9EF8EED78BB545B99359BFFE
524858A0806CC6CB2BDECEFD4D785A43215A8CDA0FF2DFED403D0E552207DD97
30A2757C030F89B9DA8391CF3F1AAB824B226AB1A92113C51CFC8361168487AA
5207B8915B1214147B5D69AD0F40A4E66A30A92303881BDFB392CF62117F1937
DCA7EE7996108BB04ACB77531FC60DF9E5E30AC4FB02F3F5CB0EF1F534A5AEBF
45AB9E4CF7B3F00C2798125453AAE9FAC75299D653DAD14A83E5461B0B6603D7
2743A8F78F5959CDBAE2D2139C2A883F9169ACB97BB0F9A0AAE6A9FADE5756E6
FC44A52E5C75CCD26C3A12706E12EA105708BC4BCB87A27F703D2377C0878B69
C8C8E6BA568DCB81B36BFB0B0C526520FE10A38A4E37D4F7856F481E25637441
CED21873F8CB4A1C2D702C2275C4D31FEC75CB06D440E6A4213DC19BE5B69F45
DC10F7EFE75804C70BA98889B49B42DEAD15A0C052DFA9DC98B411A4689EF3F6
B9EBE5306C9E5B0EF2A8C3AEF8DDFBC7E90A53B7A29CE51F35562409ABD41230
FACB55995B279A1EF71555951FA5A78EE72F9AD79233C4903317D173CDCC9750
DBB35A9380B57AB1597065A98F2C88977249C80BAB7F42F2C78F42D3E40247E7
619B8C69F6802BE50CEF2C847FEC4004F906E8DB9E45D5B17094B97224DECA86
0819B17F95F1231687403DED97CA6895DA5FDCC8B012180CD26C90C4DE9D83A0
8479F3B1E8BCAB177DF4C4D3D467A8805ED5563F49920F9A073B09B20BC589E4
A84253FAB9BD1C6596BC5FBE081EFCC25AAAF3F7A11D5553F3C5C3B96B628FEC
A128568AE91DEB4C3F859B9D49974998E518962E37C88C1A2FBC02F1967DAE6F
150EF28D80A56360D5D61E8EBF0F4A9571E5CFA6BF69D6F49223A64B5350CBE3
1C041053517F3348A94380C39AB210921934EF6DF8A23BFF58788E63CEA65322
A74002BFEB6B8665BB28613583AA16B2AC817A3224EEB35AC5458A55DACABE67
6B128D36BD86E85D6E4534AA73EF185F3D60D8C55719B280588D2D0A2C740CCA
CF6AA5E16CA5D6ED6232C5F5C85B0FE0643FD41340593570A3DD40E930BF7ED6
D4E13297D788550DE33C0B4B2D166E74FCB3A497E39819D72E0CFB59DA7E1C6E
7A336E30C092741BA7FAE9E975D5183BC45F9B5047BCB369B984A3679C551707
E8C84FFB41ABEE5C4D9620894B474546AD4A13953D17C8E671E52588E38B0E04
1E765CAEFC99C0A632CA1902B7559B78DD3AC6545FF3E3286ACE0F31713AAD3B
71257A2C223C2FC51FCC2F27BDF912B374AAADE7A834E3904D3078BDD4F645AF
270C656ABFE1E9414264C068D6063351139BF189B11FC9BC6593A5DCF19A638D
9662DF732D709DDC52E527C49A2A399A9A5A1979DD84C5DDF7B854C4BF36A12F
8B97F63A8D6BAA4DF5368420EF654A1850EEC7CB5FC6905CF4A7E3E547A418F6
F398DF8881D59E2A92657A89FEBB7411F957F9470B799F0EB54768E2BC40F003
E92214BAFF4384E6CA7738C88B3673D31EAA8AEE593438E7FF32781DEAD1CC82
3871776F82AC4234A8577CEF299C5CB3519EC7B7BEDF2E3958065861CCDC14F1
0FC7822BE4025EE840C1A9C8716159B63D45B3AF2FE2CDB764070AF5C14C143E
2320B1F0298F4DDA3C232BC8E2B001F1F669E1D9B3FDF838565C965251CE601D
A73C2B51F37D2DAEB9186E2C5B0F682F24890DBCE037952AD69AF73397EADC40
EA140CDEC195884677488AADC240E795C9CB32CCBB94AC7A4BEEFBD550938934
F06C790940B4A32B0D0DC0157687ADF64F4E36952448DD1926CF3E4C6725EEDC
CCA71BC1B6085641EA78916FAAB7F7E18374394F64E0A98976A8A883C5D2B3B7
895B412A069EC53FD5E9C745E978091C4C8B290A8683F9E7711B59DDC9ABB2E9
415DC4E2C1F36FC4FC1B46FDA0CE7F3CECDE6F53580C3A45C7CB40919D63DF8C
1680D7EC2373B90297908EF7044A56E227B55EC84C02CB6C35FE243D2776927D
88568F7F502C150ED39CAB90BAE6CCF6C1246459E7AFCAA162C26E5195A29DAA
B15D42B9817E73A240219BAE4A3032CAAABE8EA35F571A6977855533E74662FB
A143242CCE50B8DBD44016C482F35782BA085BA2213F8816F01183C3CBDE0456
F58BC36AA47F6B6704310B269842C4AC04C09EBC603E3AED6E33EE942AB489D2
3363B01D37D363139490B630EE4DA994B8BD2E81E779AA4CEE9FD614A2976D8E
3053988D5D677701882F91D1E51BCDE1D62CFE54CC36FD8148AA473B91FD2E68
B4ECB77FF5316FEB64D096AB0FBE450EFD0039F65DD95E42F92617DA74F2CE02
AF56F3070375CDFBF825F5C4E35ED3D1504D95C93437EBA7B80892EB8D5A7C48
C7EC5406DF4664A1B2D402C5C743091E7756B469730545F154330052B4479B93
D6997A5F8CE5847F736D64461BA72292473CCEADE23ADECDE189724C38612F71
B38425AF9C3AA9EDC1A1C5099B4A6F608C3468D93D38239C1FB71613FCEA39EF
7671961695CE931042155BE10957E39C34B4D55391ABA0F5592AFE1D648DE204
120A38C83212EF1647F3881045717D9B6903F981DD806D9A0C73C1316698F13B
D0D7A94ADC6377CA469C545315E5B7C88FA64519504541E549FD4C2C122F9A94
8F55AB7F5921E396AA1D8AD2D5181ECE959BA724AF16F2A6F8BB1E84CE36E93B
62AC49664B158079CC7D3D7905B9A493AF229268DBAFD8FA6277DE9A3DECD483
E00BB9D027990C277ED3404015B7A2A7EEA73ED0D6C2F1BEACAE09B2B8A1A9E2
0AD3122D5ED7EA50341411E64FA716E5D75EB726F41BE7A99FD9F689460D5705
39593E9EA7E08919D5374AB457A9DA5CC2D919ABB2F1494E869C7F024EBEE0CB
64D2320BFD12CAF3BF45BB7CB3762C2369388CD6A721C50067A8F1AB2E202358
D30803573416490508C7306697B7DA969E9299F4BBFAB04C531276C445E8034B
EDA3DB9C1C7A4E79FCD1EE08B5020837031D7FC78E4F53F5C5125253A6EA9D0A
5E2F2BC44422908B87B671EFFBDA6FC60D592261A181A9786689DD072A91BE85
FF1C6DF2C656423B57BCE16F96CACCFBE56DFC9DAFD054A066FCE1744918BB3B
61A85E1B242EA8FCBFA36A494A7B90B6FBB61C4FDB209FC8F1F1C4D783F0A776
6FDADB5C90E2E028F14B6850C6E72E2818087A03485AF5AE654BD6E4333EF9C0
76D7E96B174A18AD56A6E1ECE93A29ABB1A89CEAE5AA1275134CA11E9F5F226C
A842C3FDD64BCFF8314A84355221220F4CB83B704A247C0974EDF99C9C81A9EE
D7AFFE9148E5243956EE92AA6B19CBAC7FA23909C302428582641B9148D7D81F
7A2F91D0F70E62945833752A0F64A51C779477912A0E528D6C2F9CFC10DB0404
EBEF7A69A80820583A2B16107A8B5AB17031AC0BBDFCB5AA4FBC25375F17079A
1E7FBD356F2419B3C1D8685DE22CC682873201C3B7B4E38A0278407DD34C09FA
9C4919116B7CF8479C8317B087D31A750C934A121EA59A946E3B1CDA55521960
F13CABF6632E64C6845BDC612BE408C4F38F3344DC414D8847242D139B9734B6
8FA0D624F0FECFBDEA6B2EC548CD5532BC0FDC8DE8147A990F496C67AD5498AB
F4F5E382190DDB952A5BFBD6118539F2364F34133366D8201134E20C0E491D90
75EB2712A7A06BC09D04EC0E11FD366D9A96AF27F6D7464A20568A5821FE0C12
1663152BDE9805C0D8936EF7DA2D8E95232C0D86B1E0F31C6AB88742F9B19A49
10ACF280C40778086636EE2330258A2D395AB1CD58BB8D326FA4452C327B32C0
1812FB6FB8858C0461744800DD454C13955667CDAF10DC703737FC28F8145144
C9BBE029B3AF873A6572C00114519FE48744366981D2B6A5F5134605066A9831
5681D0696609B672DC542CAF9980623D1E9B8161C6C2B4F8077C023750E433BC
F9518C32F05364E6039D11249E08268371AA4ED124E96C6907D3464A094B3BA2
3464D8367ABC48CD9BCF0EB6A25A9FA3F16C8D086D655E4DBC9B5A9F9F764617
AE929677AA54CCD55D38584E17F68DAB965B7526D64802E8E4395AC3EBA5B99C
452AACB5596E98AC97939CF6DA4A86416EE77C4DB927089A4A2402E3650054AE
BA3CE1C4A55321D8A51376E8BAE8CED7E48E4349B954A69B4907857DBC55575F
9CDD2B9A4E3A6BFA14542349286EA16BE333BAE1361F49F51874B686B9D99C42
A156BCBDB443CD27F37ECF9F6101F24E3C34F653F04D1D939B30659AF6A1B0BE
EA4E452C4FF38651B9A9CE412DD1C578D809CE29EAEEB60D1397C9DE10F115A3
6268B1943A3353B139D55DD098B224505ACFDFF6C1CE6030A22BA59FBF72C0B1
047C6AB8603BD46B353781E38BC991885E149F289E570FE2A204C1766EA678CE
74750943A08A849A5758762C553AE44E40C042E3E9B2138C2EBFCC9E459821DB
636970CE0262DD7DD718A777AA4D1EF419F79D40A115523E1498439B0B2F6EB5
96987EB509A7B60824C35FEA6FF4A987565E60F7ABB4469C35D3A33F51F82C23
036C9F7A59AB43D167E258487ABB0BE5FFA2AC9367BE9C77C290663CAABF0304
AAFF46714CAD6270EA385EE0D7638554D25DDA61065136982394CBB4B698B8D8
A273364DD2FE33B8C8E73F6F1640E6C7620DA0F9E149DAA46BDC77E2D3182179
1E046206AC4710E28DC0A65755A60543E7BCB3C46100953DD997A8F0DFF1583E
ECE1738ED1FBFA9BC63255BDB4611E215ED8B986AEA3FD12BBBF883E03031519
05E4F4B63B01849E7015F7B1FA10CF01721C78D475C7C546DBC353CFBA651FA9
6C0DB978245D30EF69BD8C36CB1F1796350142F5AF29E572FDC04145DDAA6D28
8BFA477B5F47C74639BF12A59AE0C67EBAD888E912290B57114279C84127D445
8A16A9FC4D14B5F6F391487DBAFFE581EA7EE98A5CF0FC2541C1621236F994E1
5517F499020F4817FC59A4ECA81F8F74FCA3CD8AF181A9E53403648D62D20BF0
35B711B532D557D51D00FAB80EFA94729E9B32B6E86D02873DB1EFAE66BE6230
67CE543965655B9ECDFB69DDCD67F62F1B2200F7CCC2B498503DFC49C85DD385
CE4AC71FB980AAA1224DF579F344FA4693D200E7F095C3CAF41EB8BAE026D869
C9DA294A8FC04513A663DAE5B56477A73A3AA280E6C8FA9081EFDEEAF41682F0
9DF776C5071FACABAA80012A2F191AF1A37F3E5EA464A6BD9562B85138E89BCB
E8C20FACDB69432AA99EDB4AD13499042D6190B336AB028A5B0AAC963E8EA401
53F8FF5A0E79E66C83355D4BE141024EF93A98CE4E87E3F4B2CFA52B356FAF82
479CD35E8C6C42EE5489B4B5378E41D211E39FFCC964C42A34DCD377812DB909
C7D0F656B6DFAC960F0F25BAEAC6B5D56D231DC0290CF7B74CEF942C4ED9D198
15DFFB6CAAE93AC15BD0493D9640938494F69CE022CB4A50D83C3BB4BAC9583A
ABB62576332E151D50579417017FEDDEE91A50177E426510182B10A2ED1AB022
97941527E11AC7058D5CE3B76E64A9444D6C9F734D7603199A39A0CE1071B98F
E0BFDDD121BECDFD840BA9796282B50B7EEC0114841E6CF0B981768E02489764
BF7C5E24E27E36A80FA0E15E8133D34041650306FA7A2DF9970EF698A43F5544
2AC9422750B4DB098CBE660B923447FBECED513D337B88978277A07825EE287B
82C2F9877187B5EAC6E9F8E3E37FC5DCC8D626A381B35D7B2CBD1A1FF1A83DBA
0C9197E26146E620C084974B5FE3B25A985FAE537E7F62129B7A712457C9F942
A91B774E179EF13C570324F62926A9BEAB9B92C4A45DA52ABE3111405AF0D7F0
7D36ACF9189363ED6BE7AB6F33F973404CBAEC63887466A332EEF993D15A8F1E
673332D441C29503FF2A5C343766FB074AF6DE7760A58BF16F341C5D785F8389
B2E8BD9477546CB4ABC8710E06B1781BFAB6AFBF09E970D482747B723C8713FB
F2B139CCF2A42E3B27A23B154719A240B26F76899B494B856EEDEBB633A14077
567FFE72F25FA008D6BFC2F2524E9A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%!FontType1-1.0: SFRM1200 0.3
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1200, tcrm1200, larm1200, lbrm1200, lcrm1200, rxrm1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-185 -320 1420 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF049F26DBA77FA20B6513D
285BE588908C3BAD6A1BF20F213E587F1372774EF31D66B237AD60712D60BCFA
83574CC5F88A6B4676356ABC2DCCBA498F4272476923789659CA8836F2FDA94D
38271FA2CA8B77D7099705602FEB41085F6674B7AA0DC588C9ABCCBD9115601F
CDFBCD7A8E3CFC8B1E718E576254F5F05FAB25DC253CB561EC3604749243AED5
76898EC99BDB1760B0CA75CEAE3FE6FFF1700F64F585BE9267ACBD5F155F3122
732792E17022F23B1F46FEFB0696E5C2B78DE0479F09B6512035B9C488042B62
98525003ACCAB6C8F36BBDDBF6E82F5CFCCB418706BBEC1D4E42086E70847405
3ADD1383ADD34574F2C6C64907B0561F107A259A649BB525F0B74CC3B1F42412
C4F81A7ACDC6A3F37DE7FC06DEF21B9821DD39D75432AE3881E431569A012092
38FCECF1BE90B0B199DC4D56EE18658B2818B69FB6836486BA302CE7F6EB18CD
7AC5AC6648097F65C8AB851E9BD1696B9703230711F68FD82E1DF92936A4B1A2
CCE51645573EB0E762D68A417AB6C0A2EC8756FC9BFE5972DFC4C794E948A970
918BBB1BD7B31F9B1B323EB2AF8D41A153CB1B1511F43560825DB6ECE30C16E4
902BFD1EFF59F06984F36F284553AB3F2C7901B37ECE058F5E477EC9C629847E
1C7A3628DB7C47C099A0DF53F05ABEF94A760232985AEDEEB7AA05C95273179F
8A1AEA30BE626653D22F7725C28498D776493AF6DEBC59D44A2F6F26E5DA1A77
7B9EB9D897130FB3F6017F80AF21E4FDB73CD96834152BA948E1EC4765B253A6
565F51A1ED2AC8374CF4DB767E7F3FAF13F0A1198110F554CB6735D3C2DABCF4
0C0A431D263F22D091D0F560ABF5968868126430A293C6E8A6A87593E580B110
E15A84AE30E4846980EC5C1FB6D4037D7E1DE8CF57B6A60DD4DDF422075F85BB
0B1411164E99A03A3591915372454A70C8CC75EEE08AF87D35032DFBFD61A4E9
F968D1F514A69D62B30B89F47FCD45A41B423664A7862A1246B6D7C5E2B352E3
D5428D2B6677D38729C5752DF82CA5E35D1EA3BB9578DB117A11E5829EC57ED6
45651B554AB3310E5A5193E840B80378C7E7348B2E4239B140166276CABB529B
538E6743C5175FE35C9C0B9336DB8B635446FF710C926FBB672909752729B2B7
B20B169F02514E93500FE8CCAE9DCA6911B85B811EDB27A1C63A1E56BAA24DD1
08F95FFA04D63FA581EFB4E3711D05B6EACF0D78661B1E9E62B48838A442E796
E11044D02BCBF9146D4B3364F6B34D06B111119B323083B4A20D995CC1D43CC2
A8CDF9CC47C3E2234449473480B3CE799AEC48AA49D99D2C146C0130B2D8C5A5
1C456F23E5709062978D7722DA07278DA545F6FE9BAF8095C10FFFF106B7ED10
8085DE25BF4E3ED368FB8FCC17214D33FA27EE0091DF799F3350AE5DDB7450C0
CADBF62E8F118E5F41EE34BC1BC68E436B38EA4C74CD9697E2222CCFE870BD94
DD082639CBB0BCC0D1B9351FC2667B316184C916067AA09ADE4F2605E2F8B9C2
8DFF4E034F3B8FE7404997247E40257C1FE414FD8195BF5B6E571D708F074CB7
052E7F9B555ACED0B6A0A6544647364BFCAC39BB84A570B49B9557DAB65DD690
FB23B44796F9E05213BDD04CA6B4FD314B9A9D4CA592C13C3D70388AAFF908C7
9C7DA17ACF97F2903ED99ABF3605E9AFFFFFB7A95600F8893E74A62119AFBAB8
52BF989FD4A6A7CB72275E476AA4BB9B2726062BD6F5534260854EC79E463700
DEEECE2FA42B27CCB18895F084CB8BD753C6CA550F530ECEF0FE9E9A05CB5030
0FC210532AAF06343BF9BA4BDA9A0012516613A6729D11F396E3C10C82946260
4E0C08E5626C04257A59C7001A78D554F14A7AA8D1ACE018834FB2F6C202F133
D2A7E112F664008858352C2901A47FFD3C2DA51DE2769DBE547A209F91A5D2DF
077FF4ECD28CEC3ED28FE9AE5B795DCE254FD10FE28C4BD453EA9222492F7617
EAEF8C9717B3688E9D3C926253A1F1C38D2DB164F2C2E7E45144AFEAA96DC29B
DE648CEB5A6612650CE9363AF5F94B475109656A94CA1013269AE4DD65209606
EDBC4124C85F142BD19896E6977CAEC8DB946726F9C897C150B222FE0EF38EA4
183C5253B662111A7AF6F422F2E07B6974D654332F7BC37DDF6DC0006BF19D8E
F0C8CBA52844C4D2E9C208B51C881EEBFB90014646AD370B0F1FA7D771403E15
41575F943AF9C00D21B397608E32615CE5CEA906E69BC7A08968C003BE208BA9
E141CB3A80D1DA739C0A1C4F6EAAB676E721BB0881EE82A7D62AAB06863CCCDB
E5293C7D2A1725A6BC15C2983470FC5A9B863F6ABAC7CE577EF034686C717D6B
FCDFA9DF64613DE4AEF006E38ADA0085E2AE012D2D081967249F2260E3F6FA6E
71C49F73CC7111BDFEB0EC523EFBF17115FDFF4C76529E02A585AA57E38AFBB5
932FFE941C73FF085450DD24D6D731C47D6224C4F9062AE04350A8A8E4802195
2C3A3AFF0C63A9549A8808C77D206AC3F05DC546791D9F8C6957A4C2A9C54856
FA166D79D7F4CF1BB6354CCBEAA561CD6EDD94CB9A53B64E6B73916B753F04D1
6938F3D6E34BD70088115BE17055DB4A4B57C99941C4367C1948F4F4AC1881A4
8E4FBF16EEC3CE7BFBD67620B5D4D85451CFE107F02AEFF2F4F4C41F743CA4F7
CB3854AD22E004B8A9C2185780C79E7FE15E4D8A356F756BAF902B8D6EE823CC
09A8FEC8EC3248129E11774E85AF4ED6F30D2460FBEFE859F41EDE3AC9706F7B
701A2F5DC7CF854E2706C1AF3FE0DF46929B22D9ADA8C3024943912D954DA98E
87D0AD909BF65CB099B8E0A3D271B505D59536D2FFBDC882898D80497067F457
EDCA78244D0B32FA2EFF957D20F4464AC49E4B8E3821635D84B2196DD8A300BB
9AD5DD8A0B3F8ED37D33DF1659213DCF59EA5B07797E0E880B65F625D1351C54
E88FC0FC7ABAAB13AA586D90FF3C889FB0E7D8462F88BEE48181BDF7B410843B
014F7CB6C9AF6D6EA630F202109BECA97D655A16C0C26855CDB1FDE425D5E217
1DF987FF87575B8853003BB66C294D88231363608ACDA12597527AEAB4A621EC
D68E765CB2BDB83141E2CD428571C598FC01624205378A597F177401E9F4EE3B
411724B861B7BABF1E3CD52790F2A47F06203B4EE3E71265E7E7286738E79932
7EAAF56E76BAC094CBD224C35E63D698C013B424A6311CCC48F8B901593B0CD9
63EA8D59508D873006734A256F53F96F2B6763760D77F9AD0E88F6356CF38953
7DB5023C1B31C3C465FF8DBE3546F622FD66E30EBA19D3263E56A8E4CA3919DB
57553A4C292FBA19C4C1D8B52029D413759039E03DC0F2A4C65A27AFD8D18CC2
B8A25746B746C089077C837925205CD1C2242AE5F7C83E4103197BE497653A46
A7B86594CAC063A75E140ACA9A6328F2E208198350748847590F9EC86E2B28FA
F168AC45A4FF93E079CFDDB8D39C51780903DF9B8195D1A89087B5660C77E21C
56B2623C583741344D0C228FEC8EC6836023E82B5C3D0E09541078CE18338725
F274ADB0B8843277A8D057E942D28806B3432C169BDFD6C700DB2DF2B6225EF5
9FC9C6BAFB9C39BC0C98153CE84C95F3F1DEB3A0F432DDB9B0035559FC70F63A
AE99B5BA3460F3B99FE53DDE4231C5DA72CC7E3972DB5E6E7B0CCC7717811B97
A283E72839A9806A70E8ED74EE7E563AFA6A41352B6905FD22421C03761D9DAE
C2551DF395C685507D1D68C363CA1385BD2160B1415DCC59C073B3CD39B0D0A1
F4692E3E46F0409A11D91E6578A8082A9925BE08618CBC609E1244B5B19EB9A6
BE505717149572D3958F07DE9D708826E752C197F863042D10C326B7B54D1376
C25B6E250D29119FC64F8BFE14BB3328E14E69A92200FA9439107F8E39D130F1
5FECC354CE0EC01B83801DEAA0C697F35FA23C0ADA3AFE74216F4792D04D91D9
9C5928D8B3FEDC85A3A230FB4CAC88C7ACEF9A2429A1499A5C7EDBE49EA1C295
82AF92BD37364DC9D967DBF43367DA267BDEEA31E7307C410DC9BF548EFC9071
F92130FF06D59452218800262B6156F497E321E4EBEA85D442B3ACCF5F837780
D8EBFA0E72F699808928C43BCA562C965589164DCFD2DDFF0A83F38D5CB26E31
B281EA68C2D6AA1703682A4671C30E226B3FCAFEB311CBFD630BC9A51E72C05F
B96EEB68092EBB7F07C4F7EB2625AF6F4FCC0820498FDB926FBC2C5D63B24176
C9184F8DAC557019C26D0C690B3D9210277C6506C04CC33961C81B232BAED7A6
B30C9DA7CD53786346DC622C970D1FED0B5DBB569C2DB5BB00F5084140DC73E0
727BC50EC0DB9F2D847BA3B1BA22E733B3ED82108FE391030C574873E7B570D8
8781E47C79CD45405C5A15AB91B0FA514300B8FA63640710D369A377C828DA66
E93B971695814F3CFEA491774786BF1ED50FAE4CFE6395FA3F54FC400D55C339
1DC4A25ACF919C26F5237044496B37B4386585AF745013BC9C8F5865B057F75E
98BC1FCD59DAEAE142BD2D4E912B80B490CF62068FA870057EAF5693ABE477D9
8879AF4BD108073392E31D2450B7B9CBF2CC3C285907D13C00EC238D0210A6E8
1B848B31CABD255D2AA6714A65602B95CF2BA78D4E59CD1FF8053659BE46D2E6
50B4B4BE2819EB4FB4444835F1EB41366B0E7277AAFAC9A807DD9C6A35A9B482
D9192A65C0756F8382E0DF233C100307218B1558184CF236F975A45F28954F71
27614477487F7DB9B9224A2C535C290F183BF30D80036436F7BAF2901A1D97D8
8AD162F56AAD519C0E6A1E2948F9DC27FA986E5EC3B139CA086249649B545D68
46F52DA6CF3898D3DE82CADE3494EADF191FC2B7B737E6ABCB5B075EADFDA785
8A3B6C9F56167D2688BB21A9E9DD64146805F36EFC28E1B3A46318DB4A058B98
CFEA67C4D05D86B0EC2A0843EF4143E5FABF6FEE1E9D187AD9CA260CDAAEDD0D
D902F453B918C1B8712900D36C2AEBA4D2DF54395E93BD5B95040A4F6802CB88
A0B966B6BB048142A26D9CE8014A5E3ADA3E2FB8D7708173486737AFD40B431C
32FC363DB28AE5EC787D095702F450F3843A8823FBF8EDD31B7F0F927F1E34E9
A136FBCAB30EC2B8DF66378F28E709C0044E17BA4FE83ABBCB3D66300694165F
A99A061CA3C8F3FABED83A7409983AF74431CD731C8A5221802ACDF494126ECD
F5F8A07070FA058CA1902F491847C1205442E4C5F08802111FF320EBF19BDD8C
352C75821FD73A4912465AA29E75AD273BAFE3709358E2E3ACAA214DF47B13C0
5F4C46BCF7A3BA286143939F28CABDCE6C66956116C40F81E61AE7673CF54BAA
B62ACD6974311CF48A174E63E97A47825AA81A836329281BE87107A6585D70E7
48B5BE0B5FAE33033E06B76B22B3E347DCECA8F2FE73643012EA5DB38F4D1B48
071F527443F2A133C09E5B491C1E9AA36BDB0724353AF84A558D331551560439
6820373A057CD51646156F5BBFCE6D555D7C12AB3E3D1F7E648BEB0E38ED96FE
C84A9FAC645F2AA8E8E2E38E73651A4AD689ABA4EEF62A61BB5B2C4DD71F424D
DD46E0D106950707B471D13D74FB2A6EBCC9D94E0787D5F083F990F21EB61FA9
A415D6BE606EA1499BC8DF77FB456843C284CD15D913C9C69E721972CF98BCD2
CDDDA512714A6757AF40686EC196567DAB0ED2070348602B8AC2C6FE46108547
E76B90CE7B19B22A877D6A812016384F6546C008080BCD22C399B23B784A46BF
B426770AE56592962E5BECBE729E4C1063C6147A0AE60B88E204AFFDF14FDDA1
93C6E5216955630DF8EC1E69A5D5F7868A56ADCC26A5F707ACD3538214C73477
F132FC395555ACDF7B4E96A879168B604F5E3C5BEE9525ED9E1825C9203E5398
17CB0472CB805AA9A6B5B672E87320269C319BCC71B0CAD1E5414373BD99BFB3
D56D13405C5CB5581D00E3B59F05F749D7798573F5D8A3CFC8C97FB88BDDA19F
F9560DF2AA46E1BF724CDF871A0C911A1E40A8782F5E9E2B730606CFA772B904
A3CF3A8012953C96545749531EAD8800C475ABC877254A8D601CD2C11C8B774F
EDC7B6E72797084CCF43188D40DD39B82CF75B20BE1D5A364A21361D9B6A7B9C
FDC0C1185045156B453CB90B208F4F0C823FEBCD62559C566CD9B376963FA5EB
CBC8635ABAA64FE775BEFF8070829B7883736033997C5C75F5D52116B1623D56
0BE6DF82C2EFCEE97D38FE3E05652900BB5282962120BAA80DF66DF64C752CBA
71B573BAC93A9F5DE4D9466A73C8773A11BC6360F1E032C33C8FD02039CE379B
BDCF532F13010889FE59E3A92E69FA0DB0B54E947F72E5CF6497D8D3A10773EE
CE5FEEC5400C687E2003D74E62C914810C0F647798F5D67F361A73429A82FBD2
5D9141CDEE7A548EC53C567618F91C900C4240C382F22F3323C5BDBA029845E1
9A361DD66B0298395A04F0B34C852508FEFEBB77252CC454AEDE3FC303EAE11B
C256648EF313A78EF9FE4B498DA00E281EE10A3EA486208A279875C885CA303E
B4FFF78173029221953D0A0426C5357F7F712BEABB83D8336D508275EC9309D3
7CED0CD4E4F3999D3B27E43AC88EC9BA714FB8C4C3B8ED0161684872862891F2
C53A0CEFB9EC0180AB83578807AD854346A7D6BC6579118914488020D49714B3
AADAF6EC080E933810BA5B8693796D5C8051B385F1AEDF7C925783A0AD109B7D
4C3CEE8A9875FB3AA771E57AD62BE3E6C1E4063D9571C69D66B1ED931767E6F4
1EB22F5A92F0FEF9A4742DCB0DA91DB6D2CB3960D6F0D6F0F08578A30A600145
645BD34CBE7F2C345012FCE3DB7EF645F0AE7AB55064EBFBA78A7B05DF4C366D
4C78501BC6755F68409D392B0317BF21FE421D426CFAE2CE2ABC2B1818758E8F
66113E7C1FD38942C57D1E46699FD6B53A9DD999DA009D13AD56F4D64EB17014
5F783D9E654B9FB1C71A1853CEAF6C4CB08B7DB3B9D00FD14A3B8923239EEF15
B3B97852470406EB9AFC2BE48AFC2E1F4680494F02A74AFC2A1A689BEF2A7BB6
45F8E223D8B46EEFFFC3A49FAAAB10ECDA541E143ACCD729ED9E71F714B0DED8
8E90FDFE976BA027B720A133E728EFB64264BCE9A220DFF0F6C9585497DD1A16
D73FEC45A40348FC8DA1BA18E848A66DE1B69E322BE58AD4B8224C70E93CBDA0
13E978DD83D82FA5E81DFB3BE959F1CBE992AC72D108AEC784AFFFCC65011885
DCCDC6D14D39908498ABAD5470018A3F2BEB902F1A7414036EE9B203C463B9D5
3B1AD580ED860DC28B5B434EA78EFC65E27DA47675503E10022B1AC3DE4B0D65
4D240BDA0867CB83153CC8FCE4BC42F2896A43FF85FE584FFF875DAB05D7CB2A
1E10C8A192C649413DECB376B636651412307AF69D6BCB08EEB99A28941BAFE1
6CAEEC0DE8C53BE6A9FABDF4C3068D151DE3830F146463E99AC91D763346F28C
51D076A0C811390F96D1532AEE59DC6B715F8BB4D84BAC4D64959447C284CD15
D913C9C69E721972CF98BF6192D8967A75E3B00607640D4BEF7B1B5BCE43264D
FE6F069F9B0AF0B6550CD18A2C1771728FBBC14BB74758837ECB82DE000F56DB
503999EE5F37688D23BAE0813944C96EEED0BF420106480EC54E8EC96EA4CF46
1CC691AE68A887F6E971A1E8120FB303DA5D7E81F764003D85CCCB15B587A1B4
927867526FE63E9A7E2E3021438A2A99AF8708645B8F06A518770F2E25DB51F2
20ECCC27DC43FF31E0205B591711112E7A4517FE0A26B457787522A157A0EF55
C49978A94A5D2A7559255FDE36B3E2D9F4BA8301AA84D8B00447A35DCED596E4
461AB7FFB7086E26D3AEC9F5077B030FAA0652A206A7ABC439240D2F9288B42A
8B393DC8EFC417FDB11ED678EA164AAB15807F7127FE9B820605676670A757CF
8A7C5B37E05DE8F78898E721F8F0A615DD8A215CA1DF20DC7A6C18D0F00A7A1B
E633B28D3530DC45094D687FEFDDF8697DD341A430A8FB4A61DCD480594D17E6
F40A771BF48B73DFA78CAEB62BF9F89EDF93DA1DD02B1D1613775433850E618A
D8BD1D099DC010BED9D23814BD30EB76410EC7BBCB600D3728BAAFC5BE3CAB0A
8F3DCDC064DC7BC396F01D63060CAE9DDA4237FDDEB59E43E7CB427DC08579EB
CFBCE24CBF95E6B4D7FCF7F76BD73CA82275701D9CB07FF029D6F6CA6596652B
C881A4458578D9BC525A029B70F4F099A2D1D7F775BB0249F3428995AF9C835F
F320C47FCB83408D7189AF62A5BC88CAD0C32EBB4139C440B189CDC53421D061
558ABD4A23985A876C1BF0A8542F8726C5C1F058FF901480D494B8CC3733B168
10453FB990F1E06217567E42350C99E6ED2B08D9FA2C1D7EE9210C8A69273A96
9803D73D02D85863468D175D44E7193D3CA60DB50C533581716700FD203DAF08
DC16F14D3C216068B67997AA034E8C32043848CC51EF9B11D949B80275E43898
FCEA44E18C56F4A4BB540AF59DBE0128C6BD4500B34B23BD1BB0BF1F722FBA42
E5DF3D048451B1F8CC05CB11BC9D20B27373524C3D234FD10989CBFB8EC97D71
5D8547404A00F2BFC59F8C2DB86EC69BE41CBF1AF913FF640A0E4E650385FB03
97942EF158C0B8DC020CB8F7B7F3165E55BA7988BF49CCF916EC79D4F6A87A10
9AE4449D3D8AD0FB57C6EF39190527017BCD1B405ADC394324393A2023FC0D79
430F7F3AA71E7D5201D31284AF18099DC010BED9D23814BD30EB76410FFF7AA5
0F3B1BD434EDE8AB088F1F6DA3C4B7799467C1CF82077AC9C414466099CCECE5
E776CEA6BC2152A52F5531BA7412D4FC51C9AE3B8895B0577A91BD01E98FD9DA
EF859FC3D1DFEDF59FC7991E30E538EA282AEB39A547E53FDABD00E67B10180F
0261256913925EDA41B6BB8CEFBF4DBC586BB0740F49102F41689EBBBB27D16C
209D48E870BF73731A8C04B535DCB52406A2FC117F26A15B023D7F7DC29C51B9
90BF48F54C949EFE7E1CC0343D4B6B1C77A023BED9086424172E93EC11770F73
20AB5A3D3C8145F36EC760D6993484042C758DD37C80634400F5FC67EC8B773C
12A8F8C55D4D2E9046B3DD840ABDAE1DFF61D352F9D4E4D0339BA19C880AC80D
9847327517EA65F75BA912618853F5BDE06114E0A7974AD94901E7D1914971EE
C9EEE384CC01116BDAA2E9ACDE3B32AD1402DFF79DE6CE81CB86D38A467B4BA8
E176881696F75A6DFF3BBD22D3D13C1BE61FB8C193E903B3B18C5038E5D488D0
45EA7D4BB339009F909E8F2816EBAFCB05DD887DF16579E63749E0D5B445EF12
0DFC5F58EB078D737650D73C050BFABA8C25ECCF86D39EF9FF5A2D1B27F5FB10
49C3C94D1FDB0EA70AA1F8778280F94F3CFE93B8D5FE968D979CC252C377E7DC
5EBCEA17E949ECCC2360FDF5E9CE08A2493F81C2866D5CE1BA4C83ED77E88D2C
F94C3C25F6F41132005C1F5D2B687B866A3A72F0035351D55C683BC7C3A37558
DB64D6F694994DEAF0039BF95EB4FBAE8B114A64B7FE2F3F45C30570A97B72DE
F7969A4D297ECD0D0B8F1EECD7ECB6BA6082FABE2508EB3B634F656E97438EEF
5915DC0B58C52C9761AC4C7EE832FEE27C3BA8F6285779ECF4BC648883144CDD
9CD2710BB9C0A40F45DDFE277292FD83B6E52B286649FC205280EF22E6BC9E50
D69CC7F1FC957B5B68E0C4865C5AD6C72089E75E5C4192B5D812332F4650FA12
3C4813ED032C40973C2FDF7CB4E7C800058488C29EE5F8110A575DAF0531EC6A
4D83FAAAA64990498EE450CAFE5F521B169A820E33508180692A3D3517D2C735
703DB2C4ED830D159598A23B99E78BAC461DFF4D671835DDF1623955D68362B0
B0501E9F7A0E0BA139DA8A796E4B9FEFE17FA1A391F80ABE3C641A9E616C0FCD
3E47110F4CC1E8397872ED1E0FFC7BA5BE33A846D2FDD25DAF9B5A747EB52C04
96B2D0E493473D4F22D36BE45455AC0B359A00D02F1ABC8833FF7033A588A77E
8C795532D5543D4F7E9F552C9B7DB4551CB68D091CEF8BB75415EC33988701AD
D7AA3A8D4038FD870C5BB10C0FF9D64467F1124277D2C08E8FB1A81D6663AC4B
028833908C2981692C9ADBB1289515F5618E255706E6FDADECEC131372397BE2
798DC546A5053F0993D305FB21FB23B558551F9B07B445BCD07A27DFAF2E7962
7EC89466DEE887E184C86DB0CAA46331984DE511AF08BA10D698003D3FC6B2EC
5F07219F9110AE5BCA209F636B8FCDCBD8241165C84363ED00547C955AFC8196
837AD7B53179A5B0BB8672991AE6CE6B7B701A2FAF40715C1CD4661458F041AE
05EC2FCE3A8ED9C99307E7D2EDD9818861B2553DDACB43A101061D845166EB2A
9AA26EE7A019738ADC24D7AB7F99ADD098B34768EEC13ABCC7246A8534353B20
E991DA1AAE92C40BF1B9CEE4AB8A35DD47F4B26E479DA21F60F2CE6574BADA1E
30CF7F5C3D44FA383238F60ABB443B3D6A19D4464E56E0AB0255E4A960F8862A
FB4C67991D4F0094849F9D218170F09A327596A0F15667BA2E74D48D0A768B69
6AC6D4323CB97617B6DFCD0A5FE74E6494B1AEB41D3E515C7C139C18F68B7684
FC04C2992CE0E080863E779CF8A15B609E30627C3E0A3E30210D2664BF91C73A
D1A811696E25E5DE114B03AA6EB9E70A55E3AB0799C432C7202EF9B3F085828B
4C1B5BDD579EECB7D8C342605941EFB5C5C8813CB052EAF3A56052B8F5967E64
343A0BEC9FA8BABEAC27C8E5694CFA9D42CE9ED2AE83991547260E44DCAADE8A
D17AFB95FE50103F01016FFB5C090E03DF56F92D2432EE94D79A881C8CFF5B00
FE98C29A30F5DFF8078E771AEF97AAB73935B8776BBD26FA2766FDE9E2F0EEE4
22FE5F23D281BBFA27B6907A18FDB177DFA20B63613DACA60BF707C666AE27E8
D4FA92B983325279A0BCD58EEFD17FB5CF2F498FD290D0115268BD31695A11CC
6CA1DE73567FEED3A092ECBA7C89826CCBE778FD1F8BA65B989EFC42DD47D29B
449C4C45070C799E2A6195092D169AFB83A41C433D1497779E7BD2B7CE631293
984440983FEE13ACD68EDB5A267CCD5E540440EA91F8E67FC8A48628F3D67D32
7A1DA720DF8E02CD84784F095CC3FB17BFC2DB8AF0E5CF8D3C6AB0305679730F
FE10E21B88CE1150036D1DD7510D5B0C99FAD90300DDE25D97C65079396D62F7
2287796111C6784398A6BC3ECAC672C0403E0DA5D3A407635C42624389769854
DAEDF0CCA15D3B33FC3E90469BD44E54CD1BED852ED04EB2E98D5B0CF864F26E
3989CABB02A06230A76C3229AB971FE7A61BAA7FFFAEDEE7979DF757694CB3A8
E0B717B5EF472B22A7667AD3285CECAB7C7E7EB8FF2E45A7FB08D16568322B10
C29E985239543D32BC9D0CD5AEB82FBA9FE331E45A9D93437EC3F62EB032B061
AB58683F277CAA5243CAE1FBBF5CA8416C53CB94E17D6577C4AA8C1D35EC66BE
AFBEA0E6F257E1AAE46860883F757ADB576C0F8F856AB4EBB2D32A5DB39CCCEE
48C74CAE1E1DE558FCBEA506E60E9E73633C7126AD50216493D8A30593BEF1BB
18FA8A8CE0B5B95BFF8073FE5C4681BC7FF15A2B0F8F92B96D3BC0A1552C4C64
7B72A54E2048148E22EE5FC992246BF7F4F19B865E66B74E0AC5A9B8CAD7CB4E
0BEFAE042437BF1ACDDB9892C5455639BDC87A6DB0C15641C7332D8E33144DCC
274E12DD36CF48AB206F081FD9A850DB1782FC8962A611EBCCDB65E9C58B3316
C879BB1C3E6A9CF7937893E403FA11CCBC584A6FD8B7A389209BC7192BE078B6
782C23842AD98FD7260DCDF734749D83E6D9510BB613232CC88117AD59483434
DAB475F2B07CEF8803F525A9EC40A813A7DCB881BA0B51AD1A9C1498FAF8883D
65A61B15EEAE7EAF60D41AECA65B60D1AAE87287E5FA1236ACC0EB2019C5B1D5
CCDA02FC81B29C5B48A3053D9654A0D5DABB7B1CF7A4FBC738565016E126795B
4815AA6C84D85C43D2FCF133CE2EB99D4FF676F11A4EE176E049996FB49464F7
4D0605FF377C59A141C409DE36BDFB17727D2AF7CC179189AE465E782356A948
20B642421543DC7753C723E4B33BB2E2FCA48AAAE8AC689C19198BC5C034DB46
F9208CD0A8CDA735B701547F93140DEF7D4088D3F2082D570A1DC7EA08ACB572
39835490FC25A1C1215183569EEB31D6D3AF4180564CDB03B156E051F2DD635A
12CBB82580832DDFF93BA686CF408DBA87DAB86D7F9472569951B5437D587ED9
469FDD4D11C7D82172352B37CB42966EA61887CE958A30C3362CDB0011775929
B12969DAD0A964E3CA746F7B19FFA3EF4A16908BE321471B1A569BABFF11561F
48BAE3AB003FCA9CD00616B52F78245AB388220329A4FD55EAAC33BC9D7F764E
083BBA8A2D553B1E6E9DB3370FC6A42994334346BA37CA72B6DA469E4AFD9A4C
45BCD271F08AD485710AA9C17F6450F89355BC3919EB6C56390014C445DEFA0A
889E7BC38E876DAECDA8CEB0866DE57AA7A11C37C60965C54F38A17A1D492B44
C553763FEA5EA0D18DF926B361C018419B34AD6BFC134101D3EB5752C9AB3543
12B13DD13275898FF3B5CFACD77854AB614F00F3428FCE6C7D2E3451EF0E781B
F9CE9C81C416FCAA40204CFBE42943B3F04E0532FFAD1FC4C4C8B8FD51449F12
FB68A8A04E2B2D94AC6098581E71376274003E2D3571D07333E6D3F737A27FAF
9AB7A6C24D6B43B8ACBBE65AC89A7B37AF86DC4CD8E3B8938FD810B89E20EB80
FB8F73146BABE8AE65D8CC33BDBE60C02061DFB90766636238AE4773B5F6F910
921765CD19CAB5E859A96568419DC41C18B7FC1EC0418A94054EBD386BD9B16E
C312BA9F8D10469A0BD6D8269A53C2AA6BFF498312E0B10F88063E882F1D6825
49382D5AAC5B0FD701A99BA3DBD94A5A171C09A11A457B7EC4B61538890883C0
C553E5562DBFA80AC69BABCA7F2917005A2CEE9627DD4DCA3BB78B7DC14F439B
D1775C4EB13BA3B2D60152864BE7EDEFAE642A0FBCE6CAC4B79AA021CEA623CA
006979E76BC9A21026B5AFA16C3C57DB5948839EB2CBDCEFC63C3590D52F450A
808A9320770764812FF7CAD431B5B9C93A2D1C768A938B22F0FD149CFDAEA36F
9FC00D0856392D8F07C03E57509F2644A3D681629B569B7FB56CFB8AA9E06839
D169AA0E35F5B31D62355B04CD996EB25D146D4BE69039904762A23B4B8A252B
998B8F4A4E8BB13E7589902D9A2943D5FC8D9C446DBD680FFBEEA9525E55CB37
4C112F72B9C356B589033B11B0D322BA975B357A8D8E395F3B1FF7F65A93A611
DF4DA430CAE1E469F6BEC7CFD0C44242B109866084C8281484756AA2C2E83EAD
498053FAFF4BC0FCB90887ECCD1A652FC6786B6D8E46D4315ED67CD559A78E09
58F858F703CC4A626C8FC14F362654CC7674E4F4BE0D4D1C2E67227CC1AD4B46
250B2DAFB46F132707B67BC3D75A9C1469A997A0AC596B39F5A6FA9B3EDF335A
E68395C5C3495764557E0B69D133AD36FBFF8CB78037C11D0C0285DADF4DE724
AE916C576FCE4BFB47D877A527BBDBC49E775CBC32B44B695446B88D1787282D
1C979A6230550064B3C7A4BB93E3EA60D1CF838B73A8B97640E49825F96549BC
15FF848ED29D266F63966F33F0CE4ABAEC4F9C5BE011D526734129DFF6521044
397DAF228033FF5B5CD6A3553148003EE243A16212FF12A82C87FBD3195F30DD
09415FFC060E3CD9661CEABA55B67278CB304C051AD0BA76D4F14C13F2465B58
86BDDDA19BDD29251FA88192EF1C434A73DF73DAD3AFDFBAD6A0EF67D097B29E
AB2875DAFC5058A6E5151BA6397BCFD5EBE81959D22501A5B604E47077B28A84
00AA591B9286BD80D6870FB0908D159E5A10CE91D9AC007B0C105C84E1774B2D
D4B350EF6DA4FFF93E53661AF07AB48A418BA9D9A2597C29EFF49E98E9C4A4C6
23E2F255D05C76BC8F060602CB06BFCA81C4BB6B33C9298B8F35F5E3810A1776
B15F693FF797D82691FA9C806ECD9195D44E04E371AC77649B3ACED45EC91DDF
82D472F41FE8EFFE7112167EB5A86B5E9E4B06757F0F637818AE30A885EE56C9
DB605AC77D928BC7837A6B81AB118670EA0867A32564DAAA1D01EC5B5B501558
BBF11CB244209E0F244CBD12D96DB8E54D61154B34C2AB2757FBC502A222FCFF
98CB93C151AAB5E89567E3D7805BC251311CBE498D860136F886255BE940DC3E
92B29217E6440335CD1916E0E1E25765A81D43923B496B903B2B3310A5382B53
3CACF6E860BFD6999B90A6636EA39B0D108A05B85124E8D335E9FE70C00AC00E
08742DE5759749978B64B4DC17EE70F73403C77546A7265BDEDE60C67CE9B511
C32B78C8FB5E1C1D7C8B3C8A59F34791CC2E17E2AF9B1368BE2A7110A8A65BAD
13C499D24E64FD5E0576DF7792ECE0CD34C722479464D399D337DB488ECC1632
9B96756E41449076F353E9DC353F4C818F7223558DC3DB16060DCAA489BA4FAA
E2F81B5BDD0E7C36209C3472BDF6D515CFA5295A22BE5B6A07F2C340178BDD3B
1517D7ABCE8152D2C4EF16133440E120AAF3B189FAC353E24A97E8A82E187801
395B8AE162AA1F2AB7C75B3333E92A4A40A4A4F52EC6748693359A1980A12799
792DAC529CA24D418B887EE0E51480539F09893ED2432B02EDDFAD465D2876FA
9ABD137C1CA1D53F6919EE820533D79B3FF007A6857B072593BEBD1CEF4C336C
EE25D1A922B19F6FAD29677FF1E29F98621084A642541E4455ADCABD6B688BB2
C1AE5A5488B89437699DD6DFF71572B5898D2D46E3E8B2996B7F31523D1D858C
9AD3EDDC15D3C8A8C4042D1FADFBAF5D559C93D478526C5179540AA05D0C272C
34E5A5D8397E0F8A4D9D9B3EC2D428F3729F01EF931275AF35EDAA929F972E49
209CEBF8BC2B9DD617A4B1A1D91AAD615433DAE76BE827156E82F3603E23F30B
0B5D880D664C2DE0FA0B08ED219FE62A51BAD63CFA7196D96BD73500C5C18E09
2EC73C09A558E2DFA1473E691319BD5DD55BD659A1C25EA7085255F693610F47
B01A2C43E875C3293BA2E52FB5CAB2F86B8741A174CE5C4A1E7708DDBE241D8D
1B7498B47E159BFBA474078C4EE5C9A0CC3A412C8B751B89C8361214EC693105
921BAF0A0CCB0B309944991927EDCE8FE30B7CDF932A4606A1EC083A3E0CD562
98DEE43F772ECFD8F99377523F23E2D9C7118D349D842F56B239B171963DE144
261059D888219A65828E0F659B472AB2DC8B3D92CA0E83A7ABFB4D17C554107D
8877685EF3157A31A0B0001D0C9BF4C5885C2D19124AC83CD1492C3FCFF82CFD
350B84C7CF0D4DC8D8574A0E9D4E641C1EAD32644A9C65A293C896E8804A365A
60ED57A115AF80375C6D73C08DB295ACCAE1266455270424B73DE385477F0048
0B67A85C7D376AB4CF757DCD4B571D2F62F9518FE9A2938C21279DB82A110CC1
740040F83541A3F8F9D165CBC7F3D10532231289480188E50C4228F30A54CC5F
7FC4839403B6EBA628B7C3CD6E8680E93FFFEC8F065A5954D962AD880F6F1E3B
C5E049E1DBE0DA034AA0EC89A133AABE404F5B169931F4FD4485F6E0696E20D7
71F97A77274FFA920D3F02B1F5DDA4261ED9622B2984C6C8FDA86F01E5CA0EFF
D06ABB1025B117197CB109B8FAAD46D170607EB462E62B20635B342812E0F2F0
12D4058C2FC09428EF6B56B0B4EE532F54D75EC5D0960EC21C2C353501E729AD
12A91350D52923DDA290B08573F9986FA0D222D5B58003C75069F24779137E30
FF8A4EBB95EF73CDE54FB17FF953A8B0618849AB0AC37E7739EE4E0FEA5CCC12
111DBE5ADDB4C9C3BAB950EE43088A45D91029533E49224ACAA96950A6EC0A88
C5B4BBE5A40AAAB9495EB9F6FA6DC636617E987C5C5060FC5F33F3D4AE16B652
69E76F52FCC00E6A7A4B32E1B8D7DF85CD6E5BBB82511EC87B6FBE4FBEDD9EAC
5B1F0D4D24B3443AD3A15F287A9715DA8C6FFF2CE8E1DD8F2C28EACEE9294D7B
D0DA895266589DD60E5F9B47290B6F954638E80ED5AAC5454DC2F310E51BE80D
92D0CE87D39162E2EBDA85D103A3072B41EB849F6A1E2B96F8252069CE40CA32
ED24678C3CB2DF1C4CEA5EE6D960715E524CC67E3837E6D1098B0A949B42F028
B54E1AD427A7BFCD0AECE09F974A5A62622FC34A35253289B35C7B92EA1971E2
90BF97FD3C87B78FCAF34739955C57F2706883CE6B06AA836FBDF88D68EEEC50
14FC72B468C2D053069D1B4819861DB9788EF00B8A22DB9FF7FC55C69CFA8DB3
655397376F06CA5E421EDA4BC927728DE860C6EF4D5C6DA05F8D17EA02EAFB86
9BE8572374C38D6B45A0FFCA2776C782FE6867C647D983EA152D1ECD611BAEF1
B9114104F669E577A4F4D568667E8E801584899F5084A864F1F5A64F667DBF95
46657E66782A41BE97D7013B2C25D5CA964918CB5D605BA0789E73BA4A8240C2
79FBBF60CE92FA9A40F5FDA918F161C0092BE3428C3B941F9D50FA2DD18789AF
7B144DA70E93AFAF5EA67E26B789D4649BB57AEC33B28E1B03B297DEA7B761DF
A28F986EF8C79D2C8A1376B004EE7C34EF84AA8798A99101700B99498F57D24E
FC4E4D2B089AAEEC1CA02C8F9FAE0270CF497607C2224074D8DD8EC1CE09A1F8
B4889A07ECA64F7454A71F050B4FB463300423A11855028894515426D504A395
24506CE70E4AAFAC85F0FA293B5DD003715B4E2C1267EDD31CEFF6BD5FDA6CE7
74C93E72884ED149E9497C8A8415B3209302AE42186ADF15C076AC30FB06D751
3BBA955E64E812D93FD25269AB6E97C9B68FBB105085D1AC40ECB20A4BE54A91
A635BD458B8116BADBA2CEF2A07D5B2B69219A32ECDD3BF83BA4F7062D642FB3
E8D79AA2B86F23D44B4DB716873BE866EF87FD71A51BF869763BAE4A945293DB
A9FEA02DBD3BF3A581AC55F8125D3ACCA5CF39D711EE03DE306FCE05044C4CC6
0D701A5FE027190C75DEA9823AB19F020F1268C07E4FBBCC41E3BA7F872F8084
F7FACAB7A0382F5A70EB9A3AB6CDD73B583D91181A1F9B7B5F1347B726139BAB
B9989EA158573C922FD9E40AFB309E966F801C363F3B14D1109B2EC1FA970774
9EF122747AF5ABD0548417DAC27AA412E46039431E9C3995B08FC504D742B05F
5A501170662C8076DCE7652E88FE47E072453AFB2F1AD9FB6A38E5E2E87C403A
DC68BFC375AE77252CC4541EA5F3E45E146107692EDFA769D46AB1978DAA5787
4D2F1AF636001D5F90EB941252F7AA91228F0C926ACC23A34E089EFD0BA46E73
871795237F4E513AF56B7568D798BB9893A76953D1CCFDFE16285D1AE08A498C
0B4FC873F96F69D6E4D8FD77D4712A94D5FF1894919687FF1BEEF99423AF2BF9
FB588739DBB4C599A8158A07F9C7DDDC1977A23FB47FA299213BC534A409742C
6F451328DAC1A5F030298CD3424CAD3AD12E11E6ABC60A38887086F927FAB36B
F7AD84454F8301C0180ED0629E2CF32791289309B6E86CD906F3EEC36A4FF7F7
20F7FE6F7DAB053C24BE3F357BEB025DB1897E1BE0D1FF6B7734A77EB76A9FE6
BFA9AB61350088EF8E1AA3D9C56B1A529A16930FA2B30F1CAC675D70F2A0EA28
ED8F4C64B86C324B34DD6E2CFC88A2BC91DCFF1F1A2EFAD74FC76FF04A56C159
7940A6F7ADD03E1B43A9DAADFCD5AC07CC81EAABC33371DF2F5EA76F3D9554B6
14B7CD428C47AE884FECA6571DACD57FC85340097A932AF82699BB20C844F672
E75A28476F63A29EA3A9137D9CE8B4311A9D3096DC7F56B626CDDF0F0268BAFE
1D345840
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
TeXDict begin 21257352 3934475 1000 600 600 (tmpPSFile)
@start /Fa 204[49 49 50[{}2 99.6264 /CMR12 rf /Fb 193[76
1[76 1[27 58[{}3 99.6264 /CMMI12 rf /Fc 139[32 33 33
1[46 1[46 4[23 1[42 1[37 3[42 17[65 79[{ T1Encoding ReEncodeFont }10
83.022 /SFRM1000 rf /Fd 148[51 19[100 73 1[70 1[72 1[66
76 4[50 4[66 2[69 73 11[49 49 49 49 1[49 1[27 46[{
 T1Encoding ReEncodeFont }17 99.6264 /SFRM1200 rf end
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-720 -576 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -720
-576 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -720 -576 a -595 -125 a
tx@Dict begin CP CP translate 1.0  1.0  scale NET  end
 -595 -125 a -568 -351
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   0.19528888 true 109.43382 6.97078 0.0 -27.17241
.5 Frame  gsave 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha  fill
 grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.13791 SLW 0  setgray   0.19528888 true 318.67064 6.97078 263.95372
-27.17241 .5 Frame  gsave 0 0.4 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 -351 a
tx@Dict begin { 54.7169 -10.1006 } PutCoor PutBegin  end
 -568 -351 a -954
-316 a Fd(AER)m(OJET)34 b(4.5k)-8 b(W)-568 -351 y
tx@Dict begin  PutEnd  end
 -568
-351 a -568 -351 a
tx@Dict begin { 291.3124 -10.1006 } PutCoor PutBegin  end
 -568 -351 a 1 TeXcolorgray -785 -316
a Fd(BPT)34 b(4000)p 0 TeXcolorgray -568 -351 a
tx@Dict begin  PutEnd  end
 -568
-351 a -568 -351 a
tx@Dict begin { 152.33176 18.35213 } PutCoor PutBegin  end
 -568 -351 a -16 x Fc(Op)r(erating)27
b(state)-568 -351 y
tx@Dict begin  PutEnd  end
 -568 -351 a -568 -351 a
tx@Dict begin { 119.50143 -4.41013 } PutCoor PutBegin  end
 -568 -351
a -3 x Fd(P)33 b Fb(>)f Fd(2.3)h(k)-8 b(W)-568 -351 y
tx@Dict begin  PutEnd  end

-568 -351 a -568 -351 a
tx@Dict begin { 119.50143 -27.17241 } PutCoor PutBegin  end
 -568 -351 a -3 x Fd(P)33 b Fb(<)28
b Fa(2)p Fb(:)p Fa(3)k Fd(k)-8 b(W)-568 -351 y
tx@Dict begin  PutEnd  end
 -568 -351
a -568 -351 a
tx@Dict begin { 216.24101 -4.41013 } PutCoor PutBegin  end
 -568 -351 a Fd(400)32 b(V)-568 -351 y
tx@Dict begin  PutEnd  end
 -568
-351 a -568 -351 a
tx@Dict begin { 216.24101 -27.17241 } PutCoor PutBegin  end
 -568 -351 a Fd(5)g(A)-568 -351 y
tx@Dict begin  PutEnd  end
 -568
-351 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale true
0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow  EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565 2.0
  1. .setopacityalpha  Arrow  EndArrow  } def  1.13791 SLW 0  setgray
 /ArrowA { BeginArrow 1.  1.  scale true 0.0 1.4 1.50565 2.0   1. .setopacityalpha
 Arrow  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 
false 0.0 1.4 1.50565 2.0   1. .setopacityalpha  Arrow  EndArrow  }
def  [ 261.76515 -10.1006 113.81097 -10.1006   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -595 -125
a
tx@Dict begin  CP CP translate 1 1.0 div 1 1.0 div scale NET  end
 -595 -125 a 0 TeXcolorgray 0 TeXcolorgray eop end

userdict /end-hook known{end-hook}if
%%Trailer
cleartomark countdictstack exch sub { end } repeat restore
%%EOF
